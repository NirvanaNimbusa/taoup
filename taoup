#!/usr/bin/ruby

require 'ansi/code'

include ANSI::Code

# ... but optionally make sure ANSI escape sequences are filtered out
zero_colors=false
fortunify=false
if ARGV[0] == '--machine' then
 ARGV.shift
 zero_colors = true
elsif ARGV[0] == '--fortune' then
 zero_colors = true
 fortunify = true
else
 if `which tput` then
  colors = `tput colors`
  if colors.chop == "-1" then
   zero_colors = true
  end
 end
end
if zero_colors then
 alias :puts_old :puts
 alias :print_old :print
 if fortunify==false then
  # normal drop-ansi mode
  def puts(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   puts_old(args)
  end
  def print(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   print_old(args)
  end
 else
  # fortune mode
  def puts(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   if not args.match(/^--/) and not args.match(/^$/) then
    puts_old(args + "\n%\n")
   end
  end
  def print(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   print_old(args)
  end
 end
end

# spatial / architectural
puts '------ software architecture ------'
puts white{ "I can get another if I break it, so " } + white{ bold{ "a clay cup trumps a grail." } } + black{ bold{ " - Mirza Asadullah Khan Ghalib, classical Urdu and Persian poet from the Mughal Empire" } }
puts white{ bold{ "Rule of Zero, One or Infinity (ZOI)" } } + white{ ": Arbitrary limits on the number of instances of a particular entity should not be allowed." } + black{ bold{ " - Willem van der Poel" } }
puts white{ bold{ "Worse is better" } } + white{ ": Design for simplicity." } + black{ bold{ " - Richard P. Gabriel, 'Lisp: Good News, Bad News, How to Win Big' (1989)" } }
puts white{ bold{ "Uniform Access Principle" } } + white{ ": Services should be offered through uniform interfaces, regardless of internal implementation." } + black{ bold{ " - Bertrand Meyer" } }

puts '------------ Eric S. Raymond, The Art of Unix Programming --------------------------'
puts white{ bold{ 'Modularity' } } + white{ ': Write simple parts connected by clean interfaces.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Composition' } } + white{ ': Design programs to be connected to other programs.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Separation' } } + white{ ': Separate policy from mechanism; separate interfaces from engines.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Parsimony' } } + white{ ': Write a big program only when it is clear by demonstration that nothing else will do.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Robustness' } } + white{ ': Robustness is the child of transparency and simplicity.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Representation' } } + white{ ': Fold knowledge into data so program logic can be stupid and robust.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Diversity' } } + white{ ': Distrust all claims for "one true way".' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Extensibility' } } + white{ ': Design for the future, because it will be here sooner than you think.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Clarity' } } + white{ ': Clarity is better than cleverness.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Transparency' } } + white{ ': Design for visibility to make inspection and debugging easier.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Simplicity' } } + white{ ': Design for simplicity; add complexity only where you must.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Least Surprise' } } + white{ ': In interface design, always do the least surprising thing.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Silence' } } + white{ ': When a program has nothing surprising to say, it should say nothing.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Repair' } } + white{ ': When you must fail, fail noisily and as soon as possible.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Economy' } } + white{ ': Programmer time is expensive; conserve it in preference to machine time.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Generation' } } + white{ ': Avoid hand-hacking; write programs to write programs when you can.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Optimization' } } + white{ ': Prototype before polishing. Get it working before you optimize it.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }

# x11 guy
puts '------------ Mike Garcanz: The Unix Philosophy -------------------------------------'
puts white{ bold{ 'Small is beautiful.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Make each program do one thing well.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Build a prototype as soon as possible.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Choose portability ' } } + white{ '[high level]' } + white{ bold{ ' over efficiency ' } } + white{ '[low-level]' } + white{ bold{ '.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Store data in flat text files.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Use software leverage to your advantage.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Use shell scripts ' } } + white{ '[higher level languages]' } + white{ bold{ ' to increase leverage and portability.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Avoid captive user interfaces.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Make every program a filter.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }

# unix
puts '--- unix ----'
puts white{ bold{ "Those who don\'t understand Unix are condemned to reinvent it" } } + white{ ", poorly." } + black{ bold{ ' - Henry Spencer' } }
puts white{ bold{ "Unix is simple." } } + white{ " It just takes a genius to understand its simplicity." } + black{ bold{ ' - Dennis Ritchie' } }
puts white{ bold{ "Unix was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things." } } + black{ bold{ ' - Doug Gwyn' } }
puts white{ bold{ "Unix never says 'please'." } } + black{ bold{ ' - Rob Pike' } }
puts white{ bold{ "Unix is user-friendly." } } + white{ " It just isn't promiscuous about which users it's friendly with." } + black{ bold{ ' - Steven King' } }
puts white{ bold{ "Make each program do one thing well." } } + white{ " To do a new job, build afresh rather than complicate old programs by adding new features." } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal, Unix Time-Sharing System Forward (1978)' } }
puts white{ bold{ "Expect the output of every program to become the input to another, as yet unknown, program." } } + white{ " Don't clutter output with extraneous information. Avoid stringently columnar or binary input formats. Don't insist on interactive input." } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal, Unix Time-Sharing System Forward (1978)' } }
puts white{ bold{ "Design and build software, even operating systems, to be tried early, ideally within weeks. Don't hesitate to throw away the clumsy parts and rebuild them." } } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal, Unix Time-Sharing System Forward (1978)' } }
puts white{ bold{ "Use tools in preference to unskilled help to lighten a programming task, even if you have to detour to build the tools and expect to throw some of them out after you've finished using them." } } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal - Unix Time-Sharing System Forward (1978)' } }
puts white{ 'This is the Unix philosophy: ' } + white{ bold{ 'Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams' } } + white{ ', because that is a universal interface.' } + black{ bold{ ' - Doug McIlroy (1994)' } }
puts white{ bold{ 'The real hero of programming is the one who writes negative code.' } } + black{ bold{ ' - Doug McIlroy' } }
puts white{ 'As a programmer, it is your job to put yourself out of business.' } + white{ bold{ ' What you do today can be automated tomorrow.' } } + black{ bold{ ' - Doug McIlroy' } }
puts white{ 'Keep it ' } + white{ bold{ 'simple' } } + white{ ', make it ' } + white{ bold{ 'general' } } + white{ ', and make it ' } + white{ bold{ 'intelligible.' } } + black{ bold{ ' - Doug McIlroy' } }
puts white{ bold{ 'When in doubt, use brute force.' } } + black{ bold{ ' - Ken Thompson' } }
puts white{ bold{ 'One of my most productive days was throwing away 1000 lines of code.' } } + black{ bold{ ' - Ken Thompson' } }
puts white{ "Postel's Prescription" } + white{ bold{ ': Be liberal in what you accept, and conservative in what you send.' } } + black{ bold{ ' - Jon Postel ' } }
puts white{ bold{ "90% of the functionality delivered now is better than 100% of it delivered never." } } + black{ bold{ ' - Kernighan & Plauger' } }
puts white{ bold{ "Spell create with an \'e\'." } } + black{ bold{ " - Ken Thompson (referring to design regrets on the UNIX creat(2) system call and the fallacy of premature optimization)" } } 

# mark burgess
puts '--- mark burgess ---'
puts white{ bold{ "We have incomplete information about the world." } } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Use the right kind of probe to see the right level of detail." } } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Make our comprehension of the world more manageable by limiting the amount of information we have to interact with at any time." } } + white{ " Our experience of the world can be made comprehensible, or incomprehensible, by design." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ "The effect of limited information is that " } + white{ bold{ "we perceive and build the world as a collection of containers, patches or environments, separated from one another by limited information flow" } }  + white{ ". These structures define characteristic scales." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "The more details we can see, the less we have a sense of control." } }  + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Separation of concerns" } } + white{ " ... a necessary consequence of loss of resolution due to scale ... " } + white{ bold{ "a strategy for staying sane" } } + white{ "." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Certainty = Knowledge + Information." } } + white{ " Where knowledge is a relationship to the history of what we've already observed in the past, ie. an expectation of behaviour, and information is evidence of the present: that things are proceeding is expected." }  + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ "The way control emerges in a quantum-mechanical sense is in the manipulation of guard-rails or constraining walls, forces called potentials: containers that limit the probable range of electrons to an approximately predictable region. This is not control, but loading the dice by throwing other dice at them. Similarly, " } + white{ bold{ "when building technologies to deal with uncertainty, we must use similar ideas of constraint" } } + white{ "." }  + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Strong coupling turns out to be a particular problem in computer based infrastructure." } } + white{ " Chaos is easily contained, given the nature of computer-based infrastructure, yet systems are often pushed beyond the brink of instability. We do not escape from uncertainty so easily." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ "Designers who don't believe in Murphy's Law," } + white{ bold{ " that which can happen will happen" } } + white{ ", are irresponsible." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "The simplest idea of stability is constancy, or invariance." } } + white{ " A thing that has no possibility to change is, by definition, immune to external pertubations. [...] Invariance is an important concept, but also one that has been shattered by modern ideas of physics." } + white{ bold{ " What was once considered invariant, is usually only apparently invariant on a certain scale" } } + white{ ". When one looks in more detail, we find that we may only have invariance of an average." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }

# randoms
puts '--- randoms ----'
puts white{ bold{ 'Decisiveness is overrated.' } } + black{ bold{ ' - Philosophy, University of California, Santa Cruz' } } # via http://lolmythesis.com/post/71394379186/decisiveness-is-overrated
puts white{ bold{ 'Starfish do not walk in straight lines.' } } + black{ bold{ ' - Zoology, University College Dublin' } } # via http://lolmythesis.com/post/71594009129/starfish-do-not-walk-in-straight-lines
puts white{ bold{ 'Rocks that are next to each other in Massachusetts now were also next to each other 400 million years ago.' } } + black{ bold{ ' - Geology, Amherst College' } } # via http://lolmythesis.com/post/71456192526/rocks-that-are-next-to-each-other-in-massachusetts-now
#puts white{ bold{ 'Space is where shit happens; place is where shit goes down.' } } + black{ bold{ ' - Geography, University of Auckland' } } # http://lolmythesis.com/post/71414469402/space-is-where-shit-happens-place-is-where-shit-goes
puts white{ bold{ "I'm sorry but there's nothing I can do to help." } } + black{ bold{ ' - Information Security, Johns Hopkins University' } } # http://lolmythesis.com/post/71511993228/im-sorry-but-theres-nothing-i-can-do-to-help
puts white{ bold{ 'Rats will go to great lengths to earn a pellet of sugar' } } + white{ ', and even more so when on the right kinds of drugs.' } + black{ bold{ ' - Neuroscience, University of California, Los Angeles' } } # http://lolmythesis.com/post/71495588905/rats-will-go-to-great-lengths-to-earn-a-pellet-of
#puts white{ bold{ 'Self-assembling nanoparticles are kinda like Legos.' } } + black{ bold{ ' - Material Engineering and Nanotechnology, Tel Aviv University, Israel' } } # http://lolmythesis.com/post/71455923346/self-assembling-nanoparticles-are-kinda-like-legos
puts white{ bold{ 'The people don\'t understand.' } } + black{ bold{ ' - Political science, Sciences Po Bordeaux' } } # http://lolmythesis.com/post/71414197257/the-people-doesnt-understand
puts white{ bold{ 'Kids with imaginary friends are wicked smaht.' } } + black{ bold{ ' - Developmental Psychology, Clark University' } } # http://lolmythesis.com/post/71506098602/kids-with-imaginary-friends-are-wicked-smaht
#puts white{ bold{ 'People rock at memorizing insecure passwords, but we already knew that.' } } + black{ bold{ ' - Psychology and Computer Science, Carleton University' } } # http://lolmythesis.com/post/71394112987/people-rock-at-memorizing-insecure-passwords-but-we
#puts white{ bold{ 'We know things when we think we know things.' } } + black{ bold{ ' - Philosophy, San Francisco State University' } } # http://lolmythesis.com/post/71394719732/we-know-things-when-we-think-we-know-things
puts white{ bold{ 'Are We Certain Yet?' } } + white{ ' Towards a Phenomenal Account of Scepticism' } + black{ bold{ ' - Philosophy, University of St Andrews' } } # http://lolmythesis.com/post/71454789345/are-we-certain-yet-towards-a-phenomenal-account-of
puts white{ bold{ 'Acyclic dependencies principle' } } + white{ ': Avoid infinite loops.' }
puts white{ bold{ 'Convention over configuration' } } + white{ ': Simplify normal use cases, without necessarily sacrificing flexibility.' }
puts white{ bold{ "Atwood's Law" } } + white{ ": Any software that can be written in JavaScript will eventually be written in JavaScript." } + black{ bold{ " - Jeff Atwood" } }

# randoms on time
puts "----- randoms on time -----"
puts white{ bold{ "He who does not have a past has no present or future." } } + black{ bold{ " - Arabic proverb" } }
puts white{ bold{ "Man's most prudent counselor is time." } } + black{ bold{ " - Publilius Syrus (first century BCE)" } }
puts white{ bold{ "There is nothing which the lapse of time will not either extinguish or improve." } } + black{ bold{ " - Publilius Syrus (first century BCE)" } }
puts white{ bold{ "Those who do not forget the past are masters of the future." } } + black{ bold{ " - Sima Qian (second century BCE)" } }

# re-sectionize
puts "----- eponymous randoms -----"

# conway's law
puts white{ bold{ 'Conway\'s Law' } } + white{ ': Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.' } + black{ bold{ " - Melvin Conway, 'National Symposium on Modular Programming', 1968" } }
puts white{ bold{ 'The organization of the software and the organization of the software team will be congruent.' } } + black{ bold{ " - Eric S. Raymond, paraphrasing Conway's Law in 'The New Hacker's Dictionary'" } }
puts white{ 'If the parts of an organization (e.g. teams, departments, or subdivisions) do not closely reflect the essential parts of the product, or if the relationship between organizations do not reflect the relationships between product parts, then the project will be in trouble... therefore: ' } + white{ bold{ 'Make sure the organization is compatible with the product architecture.' } } + black{ bold{ ' - James O. Coplien and Neil B. Harrison, paraphasing Conway\'s Law (2004)' } }

# brooks' law
puts white{ bold{ "Adding manpower to a late software project makes it later." } } + white{ " Nine women can't make a baby in one month." } + black{ bold{ " - Fred Brooks, 'The Mythical Man-Month' (1975)" } }

# miller's law
puts white{ bold{ "All discussions of incremental updates will eventually trend towards proposals for large scale redesigns, feature additions or replacements." } } + black{ bold{ " - Mike Beltzner, after Dave Miller of Bugzilla" } }

# wirth's law
puts white{ bold{ "Wirth's Law" } } + white{ ": Software gets slower faster than hardware gets faster." } + black{ bold{ " - Niklaus Wirth (1995)" } }
#puts white{ bold{ "May's Law" } } + white{ ": Software efficiency halves every 18 months, compensating Moore's Law." } + black{ bold{ " - Restatement of Wirth's Law after David May." } }
#puts white{ bold{ "The speed of software halves every 18 months." } } + black{ bold{ " - Restatement of Wirth's Law after Bill Gates, founder of Microsoft." } }

# parkinson's law
puts white{ bold{ "Parkinson's Law" } } + white{ ": Work expands so as to fill the time available for its completion." } + 
black{ bold{ " - Cyril Northcote Parkinson, British civil servant, first published in 'The Economist' (1955)" } }
puts white{ bold{ "Parkinson's Law - Stock-Sanford Corollary" } } + white{ ": If you wait until the last minute, it only takes a minute to do." }
puts white{ bold{ "Parkinson's Law - Data Corollary" } } + white{ ": Data expands to fill the space available for storage." }
puts white{ bold{ "Generalized form of Parkinson's Law" } } + white{ ": The demand upon a resource tends to expand to match the supply of the resource. The reverse is not true." }
puts white{ bold{ "Principle of Comitology" } } + white{ ": Committees, government cabinets, and other such bodies are created and eventually grow irrelevant (or are initially designed as such)." } + black{ bold{ " - Cyril Northcote Parkinson, British civil servant" } }
puts white{ bold{ "Parkinson's Conjecture" } } + white{ ": Committees with a membership exceeding a number between 19.9 and 22.4 are ineffective." } + black{ bold{ " - Cyril Northcote Parkinson, British civil servant" } }

# hofstader's law
puts white{ bold{ "Hofstadter's Law" } } + white{ ": It always takes longer than you expect, even when you take into account Hofstadter's Law." } + black{ bold{ " - Douglas Hofstadter, 'Gödel, Escher, Bach: An Eternal Golden Braid' (1979)" } }

# classen's law
puts white{ bold{ "Classen's Law" } } + white{ ": Usefulness = log(Technology)" } + black{ bold{ " - Theo A. C. M. Claasen, CTO of Philips Semiconductors (1999)" } }

# arthur c. clarke
puts "----- Arthur C. Clarke -----"
puts white{ bold{ "Clarke's First Law" } } + white{ ": When a distinguished but elderly scientist states that something is possible, he is almost certainly right. When he states that something is impossible, he is very probably wrong." } + black{ bold{ " - Arthur C. Clarke" } }
puts white{ bold{ "Clarke's First Law - AI Corollary" } } + white{ ": Any sufficiently advanced benevolence may be indistinguishable from malevolence." }
puts white{ bold{ "Grey's Law (corollary to Clarke's First Law)" } } + white{ ": Any sufficiently advanced incompetence is indistinguishable from malice." }
puts white{ bold{ "Poe's Law (crollary to Clarke's First Law)" } } + white{ ": Any sufficiently advanced troll is indistinguishable from a genuine kook." }
puts white{ bold{ "Clarke's Second Law" } } + white{ ": The only way of discovering the limits of the possible is to venture a little way past them into the impossible." } + black{ bold{ " - Arthur C. Clarke" } }
puts white{ bold{ "Clarke's Third law" } } + white{ ": Any sufficiently advanced technology is indistinguishable from magic." } + black{ bold{ " - Arthur C. Clarke" } }

# kranzberg
puts "----- Melvin Kranzberg -----"
puts white{ bold{ "Kranzberg's 1st Law of Technology" } } + white{ ": Technology is neither good nor bad; nor is it neutral." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 2nd Law of Technology" } } + white{ ": Invention is the mother of necessity." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 3rd Law of Technology" } } + white{ ": Technology comes in packages, big and small." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 4th Law of Technology" } } + white{ ": Although technology might be a prime element in many public issues, nontechnical factors take precedence in technology-policy decisions." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 5th Law of Technology" } } + white{ ": All history is relevant, but the history of technology is the most relevant." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 6th Law of Technology" } } + white{ ": Technology is a very human activity - and so is the history of technology." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }


# larry niven
puts "----- Larry Niven ------"
puts white{ bold{ "Niven's First Law" } } + white{ ": Never fire a laser at a mirror." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Second Law" } } + white{ ": Giving up freedom for security is beginning to look naïve." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Third Law" } } + white{ ": It is easier to destroy than to create." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Fourth Law" } } + white{ ": Ethics change with technology." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Fifth Law" } } + white{ ": The only universal message in science fiction: There exist minds that think as well as you do, but differently." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Law of Time Travel" } } + white{ ": If the universe of discourse permits the possibility of time travel and of changing the past, then no time machine will be invented in that universe." }

puts white{ bold{ "Niven's First Law of Writing" } } + white{ ": Writers who write for other writers should write letters." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Second Law of Writing" } } + white{ ": Never be embarrassed or ashamed about anything you choose to write. (Think of this before you send it to a market.)" } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Third Law of Writing" } } + white{ ": Stories to end all stories on a given topic, don't." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Fourth Law of Writing" } } + white{ ": It is a sin to waste the reader's time." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Fifth Law of Writing" } } + white{ ": If you've nothing to say, say it any way you like. Stylistic innovations, contorted story lines or none, exotic or genderless pronouns, internal inconsistencies, the recipe for preparing your lover as a cannibal banquet: feel free. If what you have to say is important and/or difficult to follow, use the simplest language possible. If the reader doesn't get it then, let it not be your fault." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Sixth Law of Writing" } } + white{ ": Everybody talks first draft." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }


puts "----- randoms on distribution -----"
# 90/90 aka. 'Rule of Credibility'
puts white{ bold{ "90:90 Rule (Rule of Credibility)" } } + white{ ": The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time." } + black{ bold{ " - Tom Cargill, Bell Labs, as popularized by Jon Bentley's 'Programming Pearls' column, 'Communications of the ACM' (September 1985)" } }

# 80/20 aka. 'Pareto Principle'
puts white{ bold{ "80:20 Rule (Pareto Principle)" } } + white{ ": 80% of the state of the system derives from 20% of the causes." } + black{ bold{ " - Italian economist Vilfredo Pareto (1906)" } }
puts white{ bold{ "80:20 Rule (Pareto Principle) - Bug Fixing Corollary" } } + white{ ": Fixing 20% of the bugs resolves 80% of the issues." } + black{ bold{ " - Microsoft" } }
puts white{ bold{ "Law of the Vital Few" } } + white{ ": 20% of people do 80% of the work." } + black{ bold{ " - Anonymous" } }
puts white{ bold{ "20 percent of the code has 80 percent of the errors." } } + white{ " Find them, fix them!" } + black{ bold{ " - Lowell Arthur" } }

# randoms - change
puts "------ randoms on change ------"
puts white{ bold{ "A rolling stone gathers no moss." } } + black{ bold{ " - Condensed form of Publilius Syrus' (first century BCE) observation that people who are always moving, with no roots in one place, avoid responsibilities and cares. Another interpretation equates 'moss' to 'stagnation'; stagnant people lack fresh ideas and creativity." } }
puts white{ bold{ "Precautionary Principle" } } + white{ ": If an action or policy has a suspected risk, in the absence of consensus, the burden of proof that it is not harmful falls upon those taking the action." }
puts white{ bold{ "Peter Principle" } } + white{ ": People will tend to be promoted until they reach their 'position of incompetence'." } + black{ bold{ " - After Laurence J. Peter, Raymond Hull's co-author of 'The Peter Princple: Why Things Always Go Wrong' (1975)" } }

# randoms - optimization / efficiency
puts "------ randoms on optimization/efficiency ------"
#  snackwell is basically a domain-specific jevons in its original statement, therefore instead of a reasonable 
#  restatement, we leave snackwell out in favour of jevons
#puts white{ bold{ "Snackwell Effect" } } + white{ " (restatement of): Those seeking efficiency through optimization will consume with an increased frequency that partly negates the original gain." }
puts white{ bold{ "Jevons Paradox" } } + white{ ": As technology progresses, the increase in efficiency with which a resource is used tends to increase (rather than decrease) the rate of consumption of that resource." }

# steven levy
puts '--- Steven Levy ---'
puts white{ bold{ 'Access to computers - and anything which might teach you something about the way the world works - should be unlimited and total.' } } + white{ ' Always yield to the Hands-On Imperative!' } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'All information should be free.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'Mistrust authority - promote decentralization.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'Hackers should be judged by their hacking' } } + white{ ', not criteria such as degrees, age, race, sex, or position.' } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'You can create art and beauty on a computer.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'Computers can change your life for the better.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }

# rob pike
puts '--- Rob Pike ---'
puts white{ "Pike's 1st Rule" } + white{ bold{ ": You can't tell where a program is going to spend its time." } } + white{ " Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you've proven that's where the bottleneck is." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 2nd Rule" } + white{ bold{ ": Measure." } } + white{ " Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 3rd Rule" } + white{ bold{ ": Fancy algorithms are slow when " } } + white{ "n" } + white{ bold{ " is small, and " } } + white{ 'n' } + white{ bold{ " is usually small." } } + white{ " Fancy algorithms have big constants. Until you know that n is frequently going to be big, don't get fancy." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 4th Rule" } + white{ bold{ ": Fancy algorithms are buggier than simple ones, and they're much harder to implement." } } + white{ " Use simple algorithms as well as simple data structures." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 5th Rule" } + white{ bold{ ": Data dominates." } } + white{ " If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }

# hackers of history
puts '--- Hackers of History ---'
puts white{ 'The libertinistic rake is ' } + white{ bold{ 'anti-authoritarian' } } + white{ ',' } + white{ bold{ ' anti-normative' } } + white{ ', and ' } + white{ bold{ 'anti-traditional' } } + white{ '.' } + black{ bold{ ' - Wikipedia on 17th century \'Rake (character)\'' } }

# robert david steele
puts '--- Robert David Steele ---'
puts white{ bold{ 'We are at the end of a five-thousand-year-plus historical process' } } + white{ ' during which human society grew in scale while it abandoned the early indigenous wisdom councils and communal decision-making [...] Power was centralised in the hands of increasingly specialised \'elites\' and \'experts\' who not only failed to achieve all they promised but ' } + white{ bold{ 'used secrecy and the control of information to deceive the public' } } + white{ ' into allowing them to retain power over community resources that they ultimately looted.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The preconditions of revolution exist in the UK, and most western countries' } } + white{ '. The number of active pre-conditions is quite stunning, from elite isolation to concentrated wealth to inadequate socialisation and education, to concentrated land holdings to loss of authority to repression of new technologies especially in relation to energy, to the atrophy of the public sector and spread of corruption, to media dishonesty, to mass unemployment of young men and on and on and on. [...] Preconditions are not the same as precipitants. ' } + white{ bold{ 'We are waiting for our Tunisian fruit seller' } } + white{ '. The public will endure great repression, especially when most media outlets and schools are actively aiding the repressive meme of \'you are helpless, this is the order of things.\' When we have a scandal so powerful that it cannot be ignored by the average Briton or American, we will have a revolution that overturns the corrupt political systems in both countries, and perhaps puts many banks out of business. Vaclav Havel calls this ' } + white{ bold{ '\'The Power of the Powerless.\' One spark, one massive fire.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ 'The west has pursued an industrialisation path that allows for the ' } + white{ bold{ 'privatisation of wealth from the commons' } } + white{ ', along with ' } + white{ bold{ 'the criminalisation of commons rights' } } + white{ ' of the public, as well as ' } + white{ bold{ 'the externalisation of all true costs' } } + white{ '. Never mind that fracking produces earthquakes and poisons aquifers – corrupt politicians at local, state or province, and national levels are all too happy to take money for looking the other way. ' } + white{ bold{ 'Our entire commercial, diplomatic, and informational systems are now cancerous.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ 'When trade treaties have secret sections – or are entirely secret – one can be certain the public is being screwed and the secrecy is an attempt to avoid accountability.' } + white{ bold{ ' Secrecy enables corruption. So also does an inattentive public enable corruption.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'Predatory capitalism is based on the privatisation of profit and the externalisation of cost' } } + white{ '. It is an extension of the fencing of the commons, of enclosures, along with the criminalisation of prior common customs and rights. ' } + white{ bold{ 'What we need is a system that fully accounts for all costs' } } + white{ '. Whether we call that capitalism or not is irrelevant to me. But doing so would fundamentally transform the dynamic of present day capitalism, by making capital open source.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'We have over 5 billion human brains that are the one infinite resource available to us going forward' } } + white{ '. Crowd-sourcing and cognitive surplus are two terms of art for the ' } + white{ bold{ 'changing power dynamic between those at the top that are ignorant and corrupt, and those across the bottom that are attentive and ethical' } } + white{ '. The open source ecology is made up of a wide range of opens – open farm technology, open source software, open hardware, open networks, open money, open small business technology, open patents – to name just a few. The key point is that they must all develop together, otherwise the existing system will isolate them into ineffectiveness.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ 'I\'m not surprised. ' } + white{ bold{ 'Open source everything pretty much undermines everything the national security state stands for.' } } + black{ bold{ ' - Nafeez Ahmed, The Guardian, 2014-06-19, on ex-Marine, ex-CIA, Open Source Inteligence expert Robert David Steele\'s unanswered 2014-05-01 letter to US Vice President Joe Bidden urging the establishment of an Open Source Agency to cut costs and increase accountability.' } }
puts white{ 'The national security state is an expensive, ineffective monstrosity that is simply not fit for purpose. In that sense, ' } + white{ bold{ 'the national security state is it\'s own worst enemy – it\'s bound to fail.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19, summarizing his book \'On Intelligence: Spies and Secrecy in an Open World\', with a foreword by Senator David Boren, immediate past chairman of the Senate Select Committee for Intelligence' } }
puts white{ bold{ 'The National Security Agency (NSA) has not prevented any terrorist incidents. CIA cannot even get the population of Syria correct and provides no intelligence - decision-support - to most cabinet secretaries, assistant secretaries, and department heads' } } + white{ '. Indeed General Tony Zinni, when he was commander in chief of the US Central Command as it was at war, is on record as saying that he received, "at best," a meagre 4% of what he needed to know from secret sources and methods.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The 1% are simply not as powerful as they, and we, assume them to be.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19, as paraphrased by Nafeez Ahmed.' } }
puts white{ 'Open source everything is about the five billion poor coming together to reclaim their collective wealth and mobilise it to transform their lives. ' } + white{ bold{ 'There is zero chance of the revolution being put down' } } + white{ '. Public agency is emergent, and ' } + white{ bold{ 'the ability of the public to literally put any bank or corporation out of business overnight is looming' } } + white{ '. To paraphrase Abe Lincoln, you cannot screw all of the people all of the time. We\'re there. All we lack is a major precipitant – our Tunisian fruit seller. When it happens ' } + white{ bold{ 'the revolution will be deep and lasting.' } } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }
puts white{ bold{ 'Top down power has failed in a most spectacular manner, and bottom-up consensus power is emergent.' } } + white{ ' "Not in my neighborhood" is beginning to trump "Because I say so."' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The one unlimited resource we have on the planet is the human brain' } } + white{ ' – the current strategy of 1% capitalism is failing because it is killing the Golden Goose at multiple levels. Unfortunately, ' } + white{ bold{ 'the gap between those with money and power and those who actually know what they are talking about has grown catastrophic' } } + white{ '. The rich are surrounded by sycophants and pretenders whose continued employment demands that they not question the premises. As Larry Summers lectured Elizabeth Warren, \'insiders do not criticise insiders.\'' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The national security state works for the City of London and Wall Street' } } + white{ ' – both are about to be toppled by a combination of Eastern alternative banking and alternative international development capabilities, and individuals who recognise that they have the power to pull their money out of the banks and not buy the consumer goods that subsidise corruption and the concentration of wealth. ' } + white{ bold{ 'The opportunity to take back the commons for the benefit of humanity as a whole is open – here and now.' } } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }
puts white{ 'My motto, a play on the CIA motto that is disgraced every day, is \'' } + white{ bold{ 'the truth at any cost lowers all other costs' } } 
puts white{ 'Others wiser than I have pointed out that ' } + white{ bold{ 'nature bats last' } } + white{ '. We are at the end of an era in which lies can be used to steal from the public and the commons. We are at the beginning of an era in which truth in public service can restore us all to a state of grace."' } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }

# randoms - writing & software
puts '--- writing with applicability to software ---'
puts white{ "I was learning to extend myself, to make imprints of my inner life onto the outer reality of the page. Words had created visual fields for me—allowing endless possibilities for expressing meaning." } + black{ bold{ " - Pakistani-American poet Shadab Zeest Hashmi, on his development of calligraphic capacity." } }
