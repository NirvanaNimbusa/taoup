#!/usr/bin/ruby
# encoding: utf-8

require 'ansi/code'

include ANSI::Code

# ... but optionally make sure ANSI escape sequences are filtered out
zero_colors=false
fortunify=false
if ARGV[0] == '--machine' then
 ARGV.shift
 zero_colors = true
elsif ARGV[0] == '--fortune' then
 zero_colors = true
 fortunify = true
else
 if `which tput` then
  colors = `tput colors`
  if colors.chop == "-1" then
   zero_colors = true
  end
 end
end
if zero_colors then
 alias :puts_old :puts
 alias :print_old :print
 if fortunify==false then
  # normal drop-ansi mode
  def puts(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   puts_old(args)
  end
  def print(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   print_old(args)
  end
 else
  # fortune mode
  def puts(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   if not args.match(/^--/) and not args.match(/^$/) then
    puts_old(args + "\n%\n")
   end
  end
  def print(*args)
   args = args.join('')
   args.gsub!(/\x1b\[[;0-9]*[a-zA-Z]/,'') # ie. remove ansi sequences
   print_old(args)
  end
 end
end

# spatial / architectural
puts '------ software architecture ------'
puts white{ "I can get another if I break it, so " } + white{ bold{ "a clay cup trumps a grail." } } + black{ bold{ " - Mirza Asadullah Khan Ghalib, classical Urdu and Persian poet from the Mughal Empire" } }
puts white{ bold{ "Rule of Zero, One or Infinity (ZOI)" } } + white{ ": Arbitrary limits on the number of instances of a particular entity should not be allowed." } + black{ bold{ " - Willem van der Poel" } }
puts white{ bold{ "Worse is better" } } + white{ ": Design for simplicity." } + black{ bold{ " - Richard P. Gabriel, 'Lisp: Good News, Bad News, How to Win Big' (1989)" } }
puts white{ bold{ "Uniform Access Principle" } } + white{ ": Services should be offered through uniform interfaces, regardless of internal implementation." } + black{ bold{ " - Bertrand Meyer" } }
puts white{ bold{ "Rule of Least Power" } } + white{ ": Use the least powerful language possible for a given problem. Prefer declarative languages over procedural." }
puts white{ bold{ "Rule 3.14" } } + white{ ": Nothing gets standardised until there are multiple instances of running code." } + black{ bold{ " - RFC1958 (1996)" } }
puts white{ bold{ "Optimization considered harmful" } } + white{ ": In particular, optimization introduces complexity, and as well as introducing tighter coupling between components and layers." } + black{ bold{ " - RFC3439" } }
puts white{ bold{ "Law of Diminishing Returns" } } + white{ ": If one factor of production is increased while the others remain constant, the overall returns will relatively decrease after a certain point." } + black{ bold{ " - W. J. Spillman and E. Lang (1924)" } }
puts white{ bold{ "Upgrade cost of network complexity" } } + white{ ": The Internet has smart edges ... and a simple core. Adding an new Internet service is just a matter of distributing an application ... Compare this to voice, where one has to upgrade the entire core." } + black{ bold{ " - RFC3439 (2002)" } } 
puts white{ bold{ "Lest men suspect your tale untrue, keep probability in view." } } + black{ bold{ " - John Gay (1727)" } }
puts white{ bold{ "For every proverb, there is an equal and opposite proverb." } } + black{ bold{ " - Philip Wadler (2011-03-23)" } }
puts white{ bold{ "Fast, cheap, and reliable" } } + white{ ": choose two." } + black{ bold{ " - Old engineering proverb" } }
puts white{ bold{ "Freedom, security, and convenience" } } + white{ ": choose two." } + black{ bold{ " - Unknown" } }
puts white{ bold{ "Trust is the availability of effective recourse." } } + black{ bold{ " - Dan Geer (2014)" } }
puts white{ bold{ "Security engineering is about tolerable failure modes." } } + white{ " Determine which failure modes are tolerable and which are not, and design around not having the intolerable ones." } + black{ bold{ " - Dan Geer (2014)" } }
puts white{ bold{ "CIA triad" } } + white{ ": Confidentiality, Integrity, Availability." } + black{ bold{ " - Famous summary of computer security concerns." } }
puts white{ "Some people when faced with a problem think: \"I know, I'll use distributed computing\"." } + white{ bold{ " Now they have N^2 problems." } } + black{ bold{ ' - @jamesiry' } }
# paradoxes from http://www.informit.com/articles/article.aspx?p=1963779
puts white{ "Software Architecture Paradox #1: " } + white{ bold{ "Flexibility breeds complexity." } } + white{ " We aim to design flexible software; yet, in doing so, we see an undesirable increase in complexity." } + black{ bold{ " - Kirk Knoernschild (2012)" } }
puts white{ "Software Architecture Paradox #2: " } + white{ bold{ "Reuse complicates use." } } + white{ " We strive to develop reusable software, only to impair the software's ease of use." } + black{ bold{ " - Kirk Knoernschild (2012)" } }
puts white{ "Software Architecture Paradox #3: " } + white{ bold{ "Evolution impedes survival." } } + white{ " We design a software system that can evolve, but in doing so hasten its death." } + black{ bold{ " - Kirk Knoernschild (2012)" } }
# https://news.ycombinator.com/item?id=8558942
puts white{ "Design up front for reuse is, in essence, premature optimization." } + black{ bold{ " - AnimalMuppet" } }
# https://cs.uwaterloo.ca/~a78khan/cs446/additional-material/scribe/27-refactoring/Lehman-LawsOfSoftwareEvolution.pdf
puts white{ bold{ "S-Programs" } } + white{ " are programs whose function is formally defined by and derivable from a specification. " } + white{ bold{ "P-Programs" } } + white{ " [are problems] that can be precisely formulated but whose solution must inevitably reflect an approximation of the real world. " } + white{ bold{ "E-Programs" } } + white{ " are inherently even more change prone. They are programs that mechanize a human or societal activity." } + black{ bold{ " - Meir M. Lehman, Proceedings of the IEEE, Vol. 68, No. 9, September 1980." } }
# this one aka 'fundamental theorem of software engineering'
puts white{ bold{ "All problems in computer science can be solved by another level of indirection" } } + white{ ", except of course for the problem of too many indirections." } + black{ bold{ " - David Wheeler" } }
puts white{ "If you have too many special cases, you're doing it wrong." } + black{ bold{ " - Craig Zerouni" } }
puts white{ "One person's constant is another person's variable." } + black{ bold{ " - Susan Gerhart" } }
puts white{ "One person's data is another person's program." } + black{ bold{ " - Guy L. Steele, Jr." } }
puts white{ bold{ "The RPC fallacy" } } + white{ ": making remote/slow/independent things pretend to be local/fast/fate-shared." } + black{ bold{ ' - Wes Felter' } }
puts white{ "Sometimes the problem is to discover what the problem is." } + black{ bold{ " - Gordon Glegg, 'The Design of Design' (1969)" } }
puts white{ "In practice, " } + white{ bold{ "designing seems to proceed by oscillating between sub-solution and sub-problem areas" } } + white{ ", as well as by decomposing the problem and combining sub-solutions." } + black{ bold{ " - Nigel Cross" } }
puts white{ bold{ "Any attempt to formulate all possible requirements at the start of a project will fail" } } + white{ " and would cause considerable delays." } + black{ bold{ " - Pahl and Beitz, 'Engineering Design' (2007)" } }
puts white{ "If a design, particularly a team design, is to have conceptual integrity, one should " } + white{ bold{ "name the scarce resource explicitly, track it publicly, control it firmly" } } + white{ "." } + black{ bold{ " - Frederick P. Brooks, 'The Design of Design: Essays from a Computer Scientist' (2010)" } }
puts white{ "A general-purpose product is harder to design well than a special-purpose one." } + black{ bold{ " - Frederick P. Brooks, 'The Design of Design: Essays from a Computer Scientist' (2010)" } }
puts white{ bold{ "Firmitas, utilitas, venusitas." } } + white{ ' ("Firmness, utility, delight")' } + black{ bold{ " - Marcus Vitruvius, 'De Architectura' (22BCE)" } }
puts white{ "The besetting mistake of expert designers is not designing the thing wrong, but designing the wrong thing." } + black{ bold{ " - Frederick P. Brooks, 'The Design of Design: Essays from a Computer Scientist' (2010)" } }
puts white{ "The central tension in the software process comes from the fact that we must go from an informally identified need that exists in-the-world to a formal model that operates in-the-computer." } + black{ bold{ " - Bruce Blum, 'Beyond Programming' (1996)" } }
puts white{ bold{ "UML" } } + white{ " - Unnecessary Management Lingo." } + black{ bold{ ' - @iamdevloper' } }
puts white{ bold{ "There are only two hard things in Computer Science" } } + white{ ": off by one errors, cache invalidation and naming things." } + black{ bold{ " - Phil Karlton" } }
puts white{ "Functions in particular are a programming language construct and as such not easily extended across programming languages, processes and networks, mostly due to different type systems and error states [...] " } + white{ bold{ "it's not an accident or historical vestige that Unix philosophy uses the word 'program'" } } + white{ ". It has technical as well as social implications that have barely changed in the past 50 years." } + black{ bold{ " - fauigerzigerk" } }
puts white{ bold{ "Most of it's bullshit" } } + white{ " but there is a core of good ideas you have to pay attention to." } + black{ bold{ " - Joseph Henry Condon on cognitive engineering (a 1970s predecessor to the Unix Philosophy)" } }
puts white{ bold{ "Any piece of engineering design is a statement." } } + white{ " By the designer without the user." } + black{ bold{ " - MSM" } } # from https://www.princeton.edu/~hos/mike/transcripts/condon.htm .. who is MSM?
puts white{ bold{ "The major thing that we found was that you had to look at the whole problem." } } + black{ bold{ " - Joseph Henry Condon, Bell Labs" } }
puts white{ bold{ "People write programs around here because they want to use them." } } + black{ bold{ " - Joseph Henry Condon, Bell Labs" } }
puts white{ bold{ "There is no excellent beauty which hath not some strangeness in the proportion." } } + black{ bold{ " - Francis Bacon" } }
puts white{ "Don't pick the right tool for the job, " } + white{ bold{ "pick the right framework which secures you extra work for being a tool" } } + white{ "." } + black{ bold{ ' - @iamdevloper' } }
puts white{ "I cannot paint until I have the complete picture in my mind." } + black{ bold{ " - René Magritte, surrealist" } }
puts white{ "Everything tends to make one think that there is little relation between an object and that which represents it." } + black{ bold{ " - René Magritte, surrealist" } }
puts white{ "Scissors, paste, images, and genius in effect superseded brushes, paints, models, style, sensibility, and that famous sincerity demanded of artists." } + black{ bold{ " - René Magritte, surrealist, on collage" } }
puts white{ "I leave to others the business of causing anxiety and terror and mixing everything up." } + black{ bold{ " - René Magritte, surrealist" } }
puts white{ "Our secret desire is for a change in the order of things." } + black{ bold{ " - René Magritte, surrealist" } }
puts white{ bold{ "Ship of Theseus" } } + white{ ": All of the parts are new, and yet it is the same ship." }
puts white{ "I came to the conclusion that the designer of a new system must not only be the implementor and the first large-scale user; the designer should also write the first user manual." } + black{ bold{ " - Donald E. Knuth, 'The Errors of TeX' (1989)" } }
puts white{ "The height of cleverness is to be able to conceal it." } + black{ bold{ " - Francois de la Rochefoucauld (1613-1680)" } } 
puts white{ bold{ "It from Bit." } } + white{ " [Information gives rise to] every it - every particle, every field of force, even the spacetime continuum itself." } + black{ bold{ " - 'Oracular monosyllables' of Archibald Wheeler, last surviving collaborator of Einstein and Bohr" } }
puts white{ "What we call reality arises in the last analysis from the posing of yes-no questions." } + black{ bold{ " - Archibald Wheeler" } }
puts white{ bold{ "TMI" } } + white{ ": Too Much Information" } + black{ bold{ " (popular saying at the turn of the 21st century)" } }
puts white{ bold{ "Shannon's maxim" } } + black{ bold{ ": One ought to design systems under the assumption that the enemy will immediately gain full familiarity with them." } }
puts white{ "If you want creativity, take a zero off your budget. If you want sustainability, take off two zeros." } + black{ bold { " - Jaime Lerner" } }
puts white{ bold{ "Keep your code absolutely simple." } } + white{ " Keep looking at your functions and figure out how you simplify further." } + black{ bold{ " - John Romero, id Software" } }
puts white{ bold{ "We are our own best testing team" } } + white{ " and should never allow anyone else to experience bugs [...] Don't waste others' time. Test thoroughly before checking in your code." } + black{ bold{ " - John Romero, id Software" } }
puts white{ bold{ "As soon as you see a bug, you fix it." } } + white{ " Do not continue on. If you don’t fix your bugs your new code will be built on a buggy codebase and ensure an unstable foundation." } + black{ bold{ " - John Romero, id Software" } }
puts white{ bold{ "Encapsulate functionality to ensure design consistency." } } + white{ " This minimizes mistakes and saves design time." } + black{ bold{ " - John Romero, id Software" } }
puts white{ "No worthy problem is ever solved in the plane of its original conception." } + black{ bold{ " - Albert Einstein" } }
puts white{ "New levels, new devils." }
puts white{ "Little fleas have lesser fleas... and so on ad infinitum." }
puts white{ bold{ "In the time that bandwidth doubles, latency improves by no more than a factor of 1.2 to 1.4" } } + white{ " (and capacity improves faster than bandwidth)" } + black{ bold{ " - David Patterson, U.C. Berkeley (2004)" } }
puts white{ "Design the data, not the code." } + black{ bold{ " - Jon Devaan" } }
puts white{ bold{ "Designing a computer system is very different from designing an algorithm" } } + white{ ": The external interface (that is, the requirement) is less precisely defined, more complex, and more subject to change. The system has much more internal structure, and hence many internal interfaces. The measure of success is much less clear." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "There probably isn't a 'best' way to build the system, or even any major part of it" } } + white{ "; much more important is to avoid choosing a terrible way, and to have clear division of responsibilities among the parts." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "Defining interfaces is the most important part of system design." } } + white{ " Usually it is also the most difficult, since the interface design must satisfy three conflicting requirements: an interface should be simple, it should be complete, and it should admit a sufficiently small and fast implementation. Alas, all too often the assumptions embodied in an interface turn out to be misconceptions instead." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "The main reason interfaces are difficult to design is that each interface is a small programming language" } } + white{ ": it defines a set of objects and the operations that can be used to manipulate the objects. Concrete syntax is not an issue, but every other aspect of programming language design is present." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "Do one thing at a time, and do it well." } } + white{ " An interface should capture the " } + white{ bold{ "minimum" } } + white{ " essentials of an abstraction. " } + white{ bold{ "Don't generalize" } } + white{ "; generalizations are generally wrong." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "When an interface undertakes to do too much its implementation will probably be large, slow and complicated." } } + white{ " An interface is a contract to deliver a certain amount of service; clients of the interface depend on the contract, which is usually documented in the interface specification. They also depend on incurring a reasonable cost (in time or other scarce resources) for using the interface; the definition of 'reasonable' is usually not documented anywhere. If there are six levels of abstraction, and each costs 50% more than is 'reasonable', the service delivered at the top will miss by more than a factor of 10." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "Service must have a fairly predictable cost, and the interface must not promise more than the implementer knows how to deliver." } } + white{ " Especially, it should not promise features needed by only a few clients, unless the implementer knows how to provide them without penalizing others. A better implementer, or one who comes along ten years later when the problem is better understood, might be able to deliver, but unless the one you have can do so, it is wise to reduce your aspirations." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ "If in doubt, leave it out." }
puts white{ "Exterminate features." } + black{ bold{ " - Charles P. Thacker" } }
puts white{ "Everything should be made a simple as possible, but no simpler." } + black{ bold{ " - Albert Einstein" } }
puts white{ bold{ "Perfection must be reached by degrees" } } + white{ "; she requires the slow hand of time." } + black{ bold{ " - Voltaire" } }

puts '------------ Terry Crowley ------------'
puts white{ "The most robust programs isolate complexity in a way that lets significant parts of the system appear simple and straightforward and interact in simple ways with other components in the system." } + black{ bold{ " - Terry Crowley" } }
puts white{ "Performance analysis plays a key part in determining how and where to hide complexity." } + black{ bold{ " - Terry Crowley" } }
puts white{ "Success in hiding complexity is determined not by the component doing the hiding but by the consumers of that component." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "It is the fundamental role of a system designer to determine how to break down a system into components and layers; to make decisions about what to build and what to pick up from elsewhere." } } + white{ " An important element in large scale engineering is understanding how these decisions will play out over time. Change fundamentally underlies everything we do as programmers, so these design choices are not only evaluated in the moment, but are evaluated in the years to come as the product continues to evolve." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Layers (or abstractions) are fundamentally leaky." } } + white{ " These leaks have consequences immediately but also have consequences over time, in two ways. One consequence is that the characteristics of the layer leak through and permeate more of the system than you realize. These might be assumptions about specific performance characteristics or behavior ordering that is not an explicit part of the layer contract. This means that you generally are more vulnerable to changes in the internal behavior of the component that you understood. A second consequence is it also means you are more dependent on that internal behavior than is obvious, so if you consider changing that layer the consequences and challenges are probably larger than you thought." } + black{ bold{ " - Terry Crowley" } }
# the below is an effective restatement of KISS or do one thing and do it well principle
puts white{ bold{ "Layers are too functional." } } + white{ " A component you adopt will have more functionality than you actually require. In some cases, the decision to use it is based on leveraging that functionality for future uses. You adopt specifically because you want to 'get on the train' and leverage the ongoing work that will go into that component. Consequences: " } + white{ bold{ "1" } } + black{ bold{ ")" } } + white{ " The component will often make trade-offs that are biased by functionality that you do not actually require. " } + white{ bold{ "2" } } + black{ bold{ ")" } } + white{ " The component will embed complexity and constraints because of functionality you do not require and those constraints will impede future evolution of that component. " } + white{ bold{ "3" } } + black{ bold{ ")" } } + white{ " There will be more surface area to leak into your application. Some of that leakage will be due to true 'leaky abstractions' and some will be explicit (but generally poorly controlled) increased dependence on the full capabilities of the component." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Layers get replaced." } } + white{ " Requirements evolve, systems evolve, components are abandoned. You eventually need to replace that layer or component. This is true for external component dependencies as well as internal ones." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Break apart and simplify components" } } + white{ " rather than accrete more and more functionality within them." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Revel in the asynchrony." } } + white{ " Rather than trying to hide it, you accept it and design for it." } + black{ bold{ " - Terry Crowley" } }
puts white{ "When you see a technique like idempotency or immutability, you recognize them as ways of embracing the fundamental nature of the universe, not just one more design tool in your toolbox." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Much of performance analysis is about three things: locality, locality, locality." } } + white{ " Whether it is packing data on disk, managing processor cache hierarchies, or coalescing data into a communications packet, how data is packed together, the patterns for how you touch that data with locality over time and the patterns of how you transfer that data between components is fundamental to performance. Focusing on less code operating on less data with more locality over space and time is a good way to cut through the noise." } + black{ bold{ " - Terry Crowley" } }
puts white{ "When looking at the structure of a system, I'm less interested in seeing how the code interacts... " } + white{ bold{ "I want to see how the data interacts and flows" } } + white{ "." } + black{ bold{ " - Terry Crowley" } }
puts white{ "If someone tries to explain a system by describing the code structure and does not understand the rate and volume of data flow, they do not understand the system." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Caches are fundamental but also dangerous." } } + white{ " Caches are trying to leverage the runtime behavior of the code to change the pattern of interaction between different components in the system. They inherently need to model that behavior, even if that model is implicit in how they fill and invalidate the cache and test for a cache hit. If the model is poor or becomes poor as the behavior changes, the cache will not operate as expected. A simple guideline is that " } + white{ bold{ "caches must be instrumented" } } + white{ " - their behavior will degrade over time because of changing behavior of the application and the changing nature and balance of the performance characteristics of the components you are modeling. " } + white{ bold{ "Every long-time programmer has cache horror stories." } } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "Light speed analysis" } } + black{ bold{ ":" } } + white{ " What is the best theoretical performance I could achieve with this design? What is the real information content being transferred and at what rate of change? What is the underlying latency and bandwidth between components? Could the approach ever achieve the performance goals or does it need a rethink? Understand the true performance characteristics of your building blocks rather than focusing on functional characteristics." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "The human visual and nervous system [is] inherently constrained" } } + white{ ", which means a system designer can leverage (must leverage) those constraints, e.g. by virtualization (limiting how much of the underlying data model needs to be mapped into view data structures) or by limiting the rate of screen update to the perception limits of the human visual system." } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "I have struggled with complexity my entire career." } } + white{ " One of our key approaches for managing complexity is to 'walk away' and start fresh. Often new tools or languages force us to start from scratch which means that developers end up conflating the benefits of the tool with the benefits of the clean start. " } + white{ bold{ "The clean start is what is fundamental. The simplest way of controlling complexity growth is to build a smaller system with fewer developers." } } + black{ bold{ " - Terry Crowley" } }
puts white{ bold{ "I used to say my job was to design feedback loops." } } + white{ " Transparent processes [are] a great tool for empowerment - the manager can invest more and more local control in those closest to the problem because of confidence they have visibility to the progress being made. Coordination emerges naturally. Key to this is that the goal has actually been properly framed (including key resource constraints like ship schedule). Decision-making that needs to constantly flow up and down the management chain usually reflects poor framing of goals and constraints by management." } + black{ bold{ " - Terry Crowley on technical management" } }
puts white{ bold{ "One dirty little secret you learn as you move up the management ladder is that you and your new peers aren't suddenly smarter because you now have more responsibility." } } + white{ " This reinforces that the organization as a whole better be smarter than the leader at the top. Empowering every level to own their decisions within a consistent framing is the key approach to making this true. Listening and making yourself accountable to the organization for articulating and explaining the reasoning behind your decisions is another key strategy. Surprisingly, fear of making a dumb decision can be a useful motivator for ensuring you articulate your reasoning clearly and make sure you listen to all inputs." } + black{ bold{ " - Terry Crowley on technical management" } }

# extracted from https://hackernoon.com/education-of-a-programmer-aaecf2d35312
puts "------------ Terry Crowley's rules of distributed systems design ---------------"
puts white{ bold{ "Crowley's 1st rule of distributed systems design" } } + black{ bold{ ": " } } + white{ bold{ "Think through the implications to the user experience" } } + white{ " from the start rather than trying to patch on error handling, cancellation and status reporting as an afterthought." }
puts white{ bold{ "Crowley's 2nd rule of distributed systems design" } } + black{ bold{ ": " } } + white{ bold{ "Use asynchronous techniques to couple components." } } + white{ " Synchronous coupling is impossible. If something appears synchronous, it's because some internal layer has tried to hide the asynchrony and in doing so has obscured (but definitely not hidden) a fundamental characteristic of the runtime behavior of the system." }
puts white{ bold{ "Crowley's 3rd rule of distributed systems design" } } + black{ bold{ ": " } } + white{ bold{ "Recognize and explicitly design for interacting state machines." } } + white{ " These states represent robust long-lived internal system states (rather than ad-hoc, ephemeral and undiscoverable state encoded by the value of variables in a deep call stack)." }
puts white{ bold{ "Crowley's 4th rule of distributed systems design" } } + black{ bold{ ": " } } + white{ bold{ "Failure is expected." } } + white{ " The only guaranteed way to detect failure in a distributed system is to simply decide you have waited 'too long'. This naturally means that cancellation is first-class. Some layer of the system (perhaps plumbed through to the user) will need to decide it has waited too long and cancel the interaction. Cancelling is only about reestablishing local state and reclaiming local resources - there is no way to reliably propagate that cancellation through the system. It can sometimes be useful to have a low-cost, unreliable way to attempt to propagate cancellation as a performance optimization." }
puts white{ bold{ "Crowley's 5th rule of distributed systems design" } } + black{ bold{ ": " } } + white{ bold{ "Cancellation is not rollback" } } + white{ " since it is just reclaiming local resources and state. If rollback is necessary, it needs to be an end-to-end feature." }
puts white{ bold{ "Crowley's 6th rule of distributed systems design" } } + black{ bold{ ": " } } + white{ bold{ "You can never really know the state of a distributed component." } } + white{ " As soon as you discover the state, it may have changed. When you send an operation, it may be lost in transit, it might be processed but the response is lost, or it may take some significant amount of time to process so the remote state ultimately transitions at some arbitrary time in the future. This leads to approaches like idempotent operations and the ability to robustly and efficiently rediscover remote state rather than expecting that distributed components can reliably track state in parallel. The concept of 'eventual consistency' succinctly captures many of these ideas." }

puts '------------ Leslie Lamport ---------------'
puts white{ bold{ "A distributed system" } } + white{ " is one where the failure of a machine you've never heard of stops you from getting any work done." } + black{ bold{ " - Leslie Lamport" } }
# http://www.infoq.com/news/2014/10/ser-lamport-interview
puts white{ bold{ "Success really depends on the conception of the problem, the design of the system" } } + white{ ", not in the details of how it's coded." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "You're not going to come up with a simple design through any kind of coding techniques or any kind of programming language concepts." } + white{ bold{ " Simplicity has to be achieved above the code level" } } + white{ " before you get to the point which you worry about how you actually implement this thing in code." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "UML" } } + white{ " - I know next to nothing about UML - but what I do know is the language was invented first and then people came around and tried to give semantics to the language. Well, in other words what that means is that the language was invented first and it really didn't mean anything. And then, later on, people came around to try to figure out what it meant. Well, that's not the way to design a specification language. The importance of a specification language is to specify something precisely, and therefore what you write - the specification you write - has to have a precise, rigorous meaning." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "UML" } } + white{ ": a language that was invented first and then people came around to try to get semantics." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "UML" } } + white{ ": fuzzy pictures of boxes and arrows." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "People use UML, things like UML, to model programs, but it's not clear how to translate them in to sequences of states, for concurrency. If you cannot translate them in to sequences of states, it means you don't understand them, and it may mean that there's nothing there. You know, there are lots of people selling snake-oil, drawing boxes and arrows that make you feel good, but ultimately have no real meaning. If something is really meaningful you should be able to express it in mathematics." } } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "The benefit of using [a formal specification language] is that it teaches you to think rigorously, to think precisely" } } + white{ ", and the important point is the precise thinking. So what you need to avoid at all costs is any language that's all syntax and no semantics." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "A lot of the problems" } } + white{ " that exist in software, a lot of the problems that one encounters in writing... in building a system, in writing a program: those are problems that " } + white{ bold{ "are caused by not thinking about what you are doing before starting to code" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "If you're building a complicated system, " } + white{ bold{ "the battle is won or lost before a single piece of code is written." } } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "You're not going to find the best algorithm" } } + white{ " in terms of computational complexity " } + white{ bold{ "by coding" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "You could decide that you want to do something - the what - and then when it comes to programming it you discover that you can't - that is, you don't know how or the how is too expensive or something like that. So I don't mean to imply that what you should first do is thinking completely abstractly about what something is supposed to do and then, only then do you think about how you do it. " } + white{ bold{ "Part of engineering is understanding what you can do in practice and what you can't" } } + white{ ". But, given that caveat, " } + white{ bold{ "you really should understand what the system is doing before you try to implement it" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "There are two separate things you want to specify about a program or a system: " } + white{ bold{ "what it does" } } + white{ ", and " } + white{ bold{ "how it should do it" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
"Sometimes, it's obvious what something is supposed to do, like sorting a list. Other times, the really hard part of something is to decide what it's supposed to do."
puts white{ bold{ "It's really important to understand what something is supposed to do before you start to do it" } } + white{ ". Very often, once you've decided precisely what something is supposed to do, implementing it - the coding, the how - is quite trivial, and it hardly needs a specification at all or might be so simple that you really can just start coding without writing any precise description of how it does it, beyond the specification of what it's supposed to do." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "First of all, " } + white{ bold{ "there are lots of different things that can go by the name of specification" } } + white{ ". I use all of them. Sometimes a specification I write is a few English sentences. Sometimes, it's a very complicated mathematical description of the object, the what or the how. Which one is appropriate depends on the problem: how hard the problem is, how important it is that it get done correctly, and various things like that." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Anything you do is an iterative process" } } + white{ ". You start out by thinking about something, and then you start writing it, and in the course of writing it, you rewrite and you rewrite and you rewrite." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "A lot of programs I write just for my own use and I can live with the bugs and it's not that important that they be absolutely correct, but " } + white{ bold{ "sometimes I write code for other people to use and I really want it to work right" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "The important thing is not the syntax of what you're writing: the important thing is the precision, the rigor. " } + white{ bold{ "In order to understand things, you have to write them precisely." } } + white{ " I use mathematics because that is precise." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "People who are programmers should be able to " } + white{ bold{ "think precisely" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "What you need to avoid at all costs is any language that's all syntax and no semantics, because that is not going to get you to think rigorously - that's going to get you to fool yourself in to thinking that you're thinking." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "My basic mode of thinking hasn't changed: basically the idea that " } + white{ bold{ "I want to understand things, and understand things for me means being able to describe them mathematically" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
# http://channel9.msdn.com/Events/Build/2014/3-642
puts white{ bold{ "To think, you have to write." } } + white{ " If you're thinking without writing, you only think you're thinking." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Writing requires thinking." } } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "There are two models of reality that I find to be the most useful ones, especially when writing programs" } } + white{ ". The first is functions, and the second is sequences of states." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "All possible successor states" } } + white{ " of any state." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Not knowing what a program should do means we have to think even harder" } } + white{ ", before we start coding." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "You write a spec to help you think about a problem" } } + white{ " before you write the code." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "People are so used to thinking at a code level that they can't think at a higher level." } } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Why don't programmers write specs?" } } + white{ " Writing is like running. The less you do it, the slower you are. You have to strengthen your writing muscles. It takes practice. It's easier to find an excuse not to." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Thinking doesn't guarantee that you won't make mistakes" } } + white{ ". Not thinking guarantees that you will." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "The right way to think about distributed systems" } } + white{ ", and I've been doing it for 40 years, " } + white{ bold{ "is in terms of the state of the system" } } + white{ "." } + black{ bold{ " - Leslie Lamport" } }
puts white{ "To the extent that " } + white{ bold{ "[Agile software development] is [an excuse for not thinking]" } } + white{ ", it's a bad thing." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "The essence of computing is discreteness" } } + white{ ", and I believe that what one will discover is that the essence of perception is discretizing something. That is, perception means receiving this continuous input from the environment and making a discrete categorization of it, and that's the point at which perception happens." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Generally it doesn't seem to be necessary to deal with Byzantine failures." } } + white{ " Using simple techniques like checksums to avoid corruption of data, it's generally felt that that kind of malicious behavior, outside of - where the malice is caused by failure not by hackers - you don't need Byzantine fault tolerance. So, in practice that means if the computers that you're building your system out of are under your control and not under hackers' control then you don't need Byzantine fault tolerance, in which case Paxos is basically the algorithm you should be using. There are different consensus algorithms that have been proposed but the ones that are practical in the sense that they're efficient are all equivalent to Paxos at least in the normal case, and Paxos works: use that. I mean it doesn't solve all your problems, because you still have the problem of optimizing: there are lots of optimization games you can play depending upon the particular nature of the state machine you're trying to implement, but if you understand the basic Paxos algorithm then you'll understand what optimizations can be made to get it to work well for your system." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "If you're not writing a program, you shouldn't use a programming language" } } + white{ ", because programming languages are really complicated. They get more and more complicated. Now, they're complicated for good reason: they've got a difficult problem to solve, which is to be able to generate efficient code for these complicated machines, but there's a lot simpler way to describe systems, algorithms, whatever, and y'know it's a language that's been developed for a couple of thousand years for saying things precisely. It's mathematics." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "Computation is not just about functions." } } + white{ " If computation were about functions then quicksort and bubble-sort were the same because they're computing the same function. As I said a computing device is something that goes through a sequence of states and what an assignment statement is doing is it is telling you here is a new state, and also there's the notion of it's non-determinism, so the new state is not a function of the old state. So functional programming in a sense - functions - don't solve the problem of programming." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "The mathematics of computing - things like sets and functions and logic - are to computing what real numbers are to physics." } } + white{ " People who are writing programs should be as facile with that kind of very simple math as physicists are with numbers." } + black{ bold{ " - Leslie Lamport" } }
puts white{ bold{ "When you understand something, then you can find the math to express that understanding." } } + white{ " The math doesn't provide the understanding." } + black{ bold{ " - Leslie Lamport" } }

puts '------------ Eric S. Raymond, The Art of Unix Programming --------------------------'
puts white{ bold{ 'Modularity' } } + white{ ': Write simple parts connected by clean interfaces.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Composition' } } + white{ ': Design programs to be connected to other programs.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Separation' } } + white{ ': Separate policy from mechanism; separate interfaces from engines.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Parsimony' } } + white{ ': Write a big program only when it is clear by demonstration that nothing else will do.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Robustness' } } + white{ ': Robustness is the child of transparency and simplicity.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Representation' } } + white{ ': Fold knowledge into data so program logic can be stupid and robust.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Diversity' } } + white{ ': Distrust all claims for "one true way".' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Extensibility' } } + white{ ': Design for the future, because it will be here sooner than you think.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Clarity' } } + white{ ': Clarity is better than cleverness.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Transparency' } } + white{ ': Design for visibility to make inspection and debugging easier.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Simplicity' } } + white{ ': Design for simplicity; add complexity only where you must.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Least Surprise' } } + white{ ': In interface design, always do the least surprising thing.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Silence' } } + white{ ': When a program has nothing surprising to say, it should say nothing.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Repair' } } + white{ ': When you must fail, fail noisily and as soon as possible.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Economy' } } + white{ ': Programmer time is expensive; conserve it in preference to machine time.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Generation' } } + white{ ': Avoid hand-hacking; write programs to write programs when you can.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
puts white{ bold{ 'Optimization' } } + white{ ': Prototype before polishing. Get it working before you optimize it.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Programming (2003)" } }
# ESR does UIs
puts white{ bold{ 'Bliss' } } + white{ ': Allow your users the luxury of ignorance.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Distractions' } } + white{ ': Allow your users the luxury of inattention.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Flow' } } + white{ ': Allow your users the luxury of attention.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Documentation' } } + white{ ': Documentation is an admission of failure.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Transparency' } } + white{ ': Every bit of program state that the user has to reason about should be manifest in the interface.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Modelessness' } } + white{ ': The interface\'s response to user actions should be consistent and never depend on hidden state.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Seven' } } + white{ ': Users can hold at most 7±2 things at once in working storage.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Reversibility' } } + white{ ': Every operation without an undo is a horror story waiting to happen.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Confirmation' } } + white{ ': Every confirmation prompt should be a surprise.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Failure' } } + white{ ': All failures should be lessons in how not to fail.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Silence' } } + white{ ': When a program has nothing surprising to say, it should say nothing.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Automation' } } + white{ ': Never ask the user for any information that you can autodetect, copy, or deduce.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Defaults' } } + white{ ': Choose safe defaults, apply them unobtrusively, and let them be overridden if necessary.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Respect' } } + white{ ': Never mistake keeping things simple for dumbing them down, or vice-versa.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Predictability' } } + white{ ': Predictability is more important than prettiness.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }
puts white{ bold{ 'Reality' } } + white{ ': The interface isn\'t finished till the end-user testing is done.' } + black{ bold{ " - Eric S. Raymond, The Art of Unix Usability (2004)" } }

# x11 guy
puts '------------ Mike Garcanz: The Unix Philosophy -------------------------------------'
puts white{ bold{ 'Small is beautiful.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Make each program do one thing well.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Build a prototype as soon as possible.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Choose portability ' } } + white{ '[high level]' } + white{ bold{ ' over efficiency ' } } + white{ '[low-level]' } + white{ bold{ '.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Store data in flat text files.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Use software leverage to your advantage.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Use shell scripts ' } } + white{ '[higher level languages]' } + white{ bold{ ' to increase leverage and portability.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Avoid captive user interfaces.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }
puts white{ bold{ 'Make every program a filter.' } } + black{ bold{ ' - Mike Garcanz: The Unix Philosophy' } }

# unix
puts '--- unix ----'
puts white{ bold{ "Those who don't understand Unix are condemned to reinvent it" } } + white{ ", poorly." } + black{ bold{ ' - Henry Spencer' } }
puts white{ bold{ "Unix is simple." } } + white{ " It just takes a genius to understand its simplicity." } + black{ bold{ ' - Dennis Ritchie' } }
puts white{ bold{ "Unix was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things." } } + black{ bold{ ' - Doug Gwyn' } }
puts white{ bold{ "Unix never says 'please'." } } + black{ bold{ ' - Rob Pike' } }
puts white{ bold{ "Unix is user-friendly." } } + white{ " It just isn't promiscuous about which users it's friendly with." } + black{ bold{ ' - Steven King' } }
puts white{ bold{ "Make each program do one thing well." } } + white{ " To do a new job, build afresh rather than complicate old programs by adding new features." } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal, Unix Time-Sharing System Forward (1978)' } }
puts white{ bold{ "Expect the output of every program to become the input to another, as yet unknown, program." } } + white{ " Don't clutter output with extraneous information. Avoid stringently columnar or binary input formats. Don't insist on interactive input." } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal, Unix Time-Sharing System Forward (1978)' } }
puts white{ bold{ "Design and build software, even operating systems, to be tried early, ideally within weeks. Don't hesitate to throw away the clumsy parts and rebuild them." } } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal, Unix Time-Sharing System Forward (1978)' } }
puts white{ bold{ "Use tools in preference to unskilled help to lighten a programming task, even if you have to detour to build the tools and expect to throw some of them out after you've finished using them." } } + black{ bold{ ' - Doug McIlroy, The Bell System Technical Journal - Unix Time-Sharing System Forward (1978)' } }
puts white{ 'This is the Unix philosophy: ' } + white{ bold{ 'Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams' } } + white{ ', because that is a universal interface.' } + black{ bold{ ' - Doug McIlroy (1994)' } }
puts white{ bold{ 'The real hero of programming is the one who writes negative code.' } } + black{ bold{ ' - Doug McIlroy' } }
puts white{ 'As a programmer, it is your job to put yourself out of business.' } + white{ bold{ ' What you do today can be automated tomorrow.' } } + black{ bold{ ' - Doug McIlroy' } }
puts white{ 'Keep it ' } + white{ bold{ 'simple' } } + white{ ', make it ' } + white{ bold{ 'general' } } + white{ ', and make it ' } + white{ bold{ 'intelligible.' } } + black{ bold{ ' - Doug McIlroy' } }
puts white{ bold{ 'When in doubt, use brute force.' } } + black{ bold{ ' - Ken Thompson' } }
puts white{ bold{ 'One of my most productive days was throwing away 1000 lines of code.' } } + black{ bold{ ' - Ken Thompson' } }
puts white{ "Postel's Prescription" } + white{ bold{ ': Be liberal in what you accept, and conservative in what you send.' } } + black{ bold{ ' - Jon Postel ' } }
puts white{ bold{ "90% of the functionality delivered now is better than 100% of it delivered never." } } + black{ bold{ ' - Kernighan & Plauger' } }
puts white{ bold{ "There are two major products that come out of Berkeley: LSD and UNIX." } } + white{ " We don't believe this to be a coincidence." } + black{ bold{ ' - Jeremy S. Anderson.' } }
puts white{ bold{ "'One thing well' misses the point" } } + white{ ": it should be 'One thing well AND COMPOSES WELL'" } + black{ bold{ " - marius eriksen (@marius), October 10, 2012, referring to the 'programs should do one thing and do it well' unix philosophy." } }

# mark burgess
puts '--- mark burgess ---'
puts white{ bold{ "We have incomplete information about the world." } } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Use the right kind of probe to see the right level of detail." } } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Make our comprehension of the world more manageable by limiting the amount of information we have to interact with at any time." } } + white{ " Our experience of the world can be made comprehensible, or incomprehensible, by design." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ "The effect of limited information is that " } + white{ bold{ "we perceive and build the world as a collection of containers, patches or environments, separated from one another by limited information flow" } } + white{ ". These structures define characteristic scales." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "The more details we can see, the less we have a sense of control." } } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Separation of concerns" } } + white{ " ... a necessary consequence of loss of resolution due to scale ... " } + white{ bold{ "a strategy for staying sane" } } + white{ "." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Certainty = Knowledge + Information." } } + white{ " Where knowledge is a relationship to the history of what we've already observed in the past, ie. an expectation of behaviour, and information is evidence of the present: that things are proceeding is expected." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ "The way control emerges in a quantum-mechanical sense is in the manipulation of guard-rails or constraining walls, forces called potentials: containers that limit the probable range of electrons to an approximately predictable region. This is not control, but loading the dice by throwing other dice at them. Similarly, " } + white{ bold{ "when building technologies to deal with uncertainty, we must use similar ideas of constraint" } } + white{ "." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "Strong coupling turns out to be a particular problem in computer based infrastructure." } } + white{ " Chaos is easily contained, given the nature of computer-based infrastructure, yet systems are often pushed beyond the brink of instability. We do not escape from uncertainty so easily." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ "Designers who don't believe in Murphy's Law," } + white{ bold{ " that which can happen will happen" } } + white{ ", are irresponsible." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }
puts white{ bold{ "The simplest idea of stability is constancy, or invariance." } } + white{ " A thing that has no possibility to change is, by definition, immune to external pertubations." } + black{ bold{ " [...] " } } + white{ "Invariance is an important concept, but also one that has been shattered by modern ideas of physics." } + white{ bold{ " What was once considered invariant, is usually only apparently invariant on a certain scale" } } + white{ ". When one looks in more detail, we find that we may only have invariance of an average." } + black{ bold{ " - Mark Burgess, In Search of Certainty: The Science of Our Information Infrastructure (2013)" } }

# earl wiener
puts '--- earl wiener ---'
puts white{ bold{ "Wiener's First Law" } } + white{ ": Every device creates its own opportunity for human error." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Second Law" } } + white{ ": Exotic devices create exotic problems." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Third Law" } } + white{ ": Digital devices tune out small errors while creating opportunities for large errors." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Fourth Law" } } + white{ ": Invention is the mother of necessity." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Fifth Law" } } + white{ ": Some problems have no solution." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Sixth Law" } } + white{ ": It takes an airplane to bring out the worst in a pilot." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Seventh Law" } } + white{ ": Whenever you solve a problem, you usually create one. You can only hope that the one you created is less critical than the one you eliminated." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }
puts white{ bold{ "Wiener's Eighth and Final Law" } } + white{ ": You can never be too careful about what you put into a digital flight-guidance system." } + black{ bold{ " - Earl Wiener, Professor of Engineering, University of Miami (1980)" } }

# randoms
puts '--- randoms ----'
puts white{ bold{ 'Decisiveness is overrated.' } } + black{ bold{ ' - Philosophy, University of California, Santa Cruz' } } # via http://lolmythesis.com/post/71394379186/decisiveness-is-overrated
puts white{ bold{ 'Starfish do not walk in straight lines.' } } + black{ bold{ ' - Zoology, University College Dublin' } } # via http://lolmythesis.com/post/71594009129/starfish-do-not-walk-in-straight-lines
puts white{ bold{ 'Rocks that are next to each other in Massachusetts now were also next to each other 400 million years ago.' } } + black{ bold{ ' - Geology, Amherst College' } } # via http://lolmythesis.com/post/71456192526/rocks-that-are-next-to-each-other-in-massachusetts-now
#puts white{ bold{ 'Space is where shit happens; place is where shit goes down.' } } + black{ bold{ ' - Geography, University of Auckland' } } # http://lolmythesis.com/post/71414469402/space-is-where-shit-happens-place-is-where-shit-goes
puts white{ bold{ "I'm sorry but there's nothing I can do to help." } } + black{ bold{ ' - Information Security, Johns Hopkins University' } } # http://lolmythesis.com/post/71511993228/im-sorry-but-theres-nothing-i-can-do-to-help
puts white{ bold{ 'Rats will go to great lengths to earn a pellet of sugar' } } + white{ ', and even more so when on the right kinds of drugs.' } + black{ bold{ ' - Neuroscience, University of California, Los Angeles' } } # http://lolmythesis.com/post/71495588905/rats-will-go-to-great-lengths-to-earn-a-pellet-of
#puts white{ bold{ 'Self-assembling nanoparticles are kinda like Legos.' } } + black{ bold{ ' - Material Engineering and Nanotechnology, Tel Aviv University, Israel' } } # http://lolmythesis.com/post/71455923346/self-assembling-nanoparticles-are-kinda-like-legos
puts white{ bold{ 'The people don\'t understand.' } } + black{ bold{ ' - Political science, Sciences Po Bordeaux' } } # http://lolmythesis.com/post/71414197257/the-people-doesnt-understand
puts white{ bold{ 'Kids with imaginary friends are wicked smaht.' } } + black{ bold{ ' - Developmental Psychology, Clark University' } } # http://lolmythesis.com/post/71506098602/kids-with-imaginary-friends-are-wicked-smaht
#puts white{ bold{ 'People rock at memorizing insecure passwords, but we already knew that.' } } + black{ bold{ ' - Psychology and Computer Science, Carleton University' } } # http://lolmythesis.com/post/71394112987/people-rock-at-memorizing-insecure-passwords-but-we
#puts white{ bold{ 'We know things when we think we know things.' } } + black{ bold{ ' - Philosophy, San Francisco State University' } } # http://lolmythesis.com/post/71394719732/we-know-things-when-we-think-we-know-things
puts white{ bold{ 'Are We Certain Yet?' } } + white{ ' Towards a Phenomenal Account of Scepticism' } + black{ bold{ ' - Philosophy, University of St Andrews' } } # http://lolmythesis.com/post/71454789345/are-we-certain-yet-towards-a-phenomenal-account-of
puts white{ bold{ 'Acyclic dependencies principle' } } + white{ ': Avoid infinite loops.' }
puts white{ bold{ 'Convention over configuration' } } + white{ ': Simplify normal use cases, without necessarily sacrificing flexibility.' }
puts white{ bold{ "Everything of importance has been said before" } } + white{ " by somebody who did not discover it." } + black{ bold{ " - Alfred North Whitehead" } }
puts white{ bold{ "Gobbledygook." } } + black{ bold{ " - Congressman Maury Maverick (1944); grandson of Samuel Augustus Maverick, originator of the term 'maverick'." } }
puts white{ bold{ "AI is whatever hasn't been done yet." } } + black{ bold{ " - Douglas Hofstadter (1980)" } }
puts white{ bold{ "The simple things you see are all complicated." } } + black{ bold{ " - 'Substitute', song by The Who (1966)" } }
puts white{ bold{ "Let us be lazy in everything, except in loving and drinking, except in being lazy." } } + black{ bold{ " - Gotthold Ephraim Lessing (1729-1781)" } }
puts white{ bold{ "It is the mark of great people to treat trifles as trifles and important matters as important." } } + black{ bold{ " - Gotthold Ephraim Lessing (1729-1781)" } }
puts white{ bold{ "The worst of superstitions is to think one's own most bearable." } } + black{ bold{ " - Gotthold Ephraim Lessing (1729-1781), 'Nathan the Wise' (1779), Act IV, scene II" } }
puts white{ bold{ "It is infinitely difficult to know when and where one should stop, and for all but one in thousands the goal of their thinking is the point at which they have become tired of thinking." } } + black{ bold{ " - Gotthold Ephraim Lessing (1729-1781)" } }
puts white{ bold{ "Laziness is the mother of efficiency." } } + black{ bold{ " - Marian Propp" } }
puts white{ bold{ "Human nature is above all things lazy." } } + black{ bold{ " - Harriet Beecher Stowe (1811-1896)" } }
puts white{ bold{ "Law of Communications" } } + white{ ": The inevitable result of improved and enlarged communications between different levels in a hierarchy is a vastly increased area of misunderstanding." }
puts white{ "Good customer relations double productivity." } + black{ bold{ " - Larry Bernstein, Bell Communications Research" } }
puts white{ bold{ "Rule of Defactualization" } } + white{ ": Information deteriorates upward through bureaucracies." }
puts white{ bold{ "Fifth Rule" } } + white{ ": You have taken yourself too seriously." }
puts white{ bold{ "Futility Principle" } } + white{ ": No experiment is ever a complete failure; it can always serve as a bad example." }
puts white{ bold{ "One Page Principle" } } + white{ ": A specification that will not fit on one page cannot be understood." }
puts white{ bold{ "The most powerful dehumanizing machine is not technology but the social machine" } } + white{ ", ie. The formation of command structures to make humans emulate technology in order to build pyramids and skyscrapers..." } + black{ bold{ " - Lewis Mumford (1967)" } }
puts white{ "When things are not going well, " } + white{ bold{ 'until you get the truth out on the table' } } + white{ ', no matter how ugly, ' } + white{ bold{ 'you are not in a position to deal with it.' } } + black{ bold{ ' - Bob Seelert, chairman of the global advertising firm Saatchi and Saatchi' } }
puts white{ bold{ "The reasons you get into trouble become the reasons you don't get out of it." } } + black{ bold{ " - Old saying in the aviation industry." } }
puts white{ "It seems that we are locked into a spiral in which " } + white{ bold{ "poor human performance begets automation, which worsens human performance, which begets increasing automation" } } + white{ ". The pattern is common to our time but is acute in aviation. Air France 447 was a case in point." } + black{ bold{ " - William Langewiesche, 'The Human Factor: Should Airplanes be Flying Themselves?', Vanity Fair, October 2014" } }
puts white{ "The dynamic has become inevitable. " } + white{ bold{ "There will still be accidents, but at some point we will have only the machines to blame." } } + black{ bold{ " - William Langewiesche, 'The Human Factor: Should Airplanes be Flying Themselves?', Vanity Fair, October 2014"} }
# http://www.salon.com/2014/10/12/google_makes_us_all_dumber_the_neuroscience_of_search_engines/
puts white{ "Looking back, I think " } + white{ bold{ "it was more difficult to see what the problems were than to solve them." } } + black{ bold{ " - Charles Darwin" } }
puts white{ "Thoroughly conscious ignorance is the prelude to every real advance in science." } + black{ bold{ ' - James Clerk Maxwell' } }
puts white{ "Science produces ignorance at a faster rate than it produces knowledge." } + black{ bold{ ' - Stuart Firestein, Chair of the Department of Biological Sciences, Columbia University' } }
puts white{ bold{ "The idea we should outsource our memories to the web: it’s a short-cut to stupidity" } } + white{ ". The less we know, the worse we are at processing new information, and the slower we are to arrive at pertinent inquiry." } + black{ bold{ " - Ian Leslie, 'Google makes us all dumber: The Neuroscience of Search Engines', Salon.com (2014)" } }
puts white{ bold{ "Machines are for answers" } } + white{ "; humans are for questions." } + black{ bold{ " - Kevin Kelly, founding executive editor of Wired magazine, former editor/publisher of the Whole Earth Review" } }
puts white{ "In a world awash in ready-made answers, " } + white{ bold{ "the ability to pose difficult, even unanswerable questions is more important than ever" } } + white{ "." } + black{ bold{ " - Ian Leslie, 'Google makes us all dumber: The Neuroscience of Search Engines', Salon.com (2014)" } }
puts white{ bold{ "[Computers] are useless." } } + white{ " They can only give you answers." } + black{ bold{ " - Pablo Picasso (1964) " } }
puts white{ "Computers are useless without truly curious humans." } + black{ bold{ " - Ian Leslie, 'Google makes us all dumber: The Neuroscience of Search Engines', Salon.com (2014)" } }
# http://www.nytimes.com/2014/04/06/magazine/flash-boys-michael-lewis.html?_r=4
puts white{ "The deep problem with the system was a kind of moral inertia. " } + white{ bold{ "So long as it served the narrow self-interests of everyone inside it, no one on the inside would ever seek to change it" } } + white{ ", no matter how corrupt or sinister it became." } + black{ bold{ " - Michael Lewis on systematized high frequency trading (HFT) fraud, New York Times Magazine, March 2014." } }
puts white{ "If you believe in a principle, never damage it with a poor impression." } + white{ bold{ " You must go the whole way." } } + black{ bold{ " - Charlie Parsons, gentleman scientist" } }
# http://aeon.co/magazine/psychology/why-broken-sleep-is-a-golden-time-for-creativity/
puts white{ bold{ "Let the end of thy first sleep raise thee from thy repose" } } + white{ ": then hath thy body the best temper, then hath thy soule the least incumbrance; then no noise shall disturbe thine ear; no object shall divert thine eye." } + black{ bold{ " - 17th-century English poet Francis Quarles, on the value of night-waking, darkness and silence as aids to internal reflection" } }
puts white{ bold{ "Throw The First One Away" } } + white{ ": You will understand the problem much better after your first attempt." }
puts white{ bold{ "Fail Quickly" } } + white{ ": This makes evolution less painful and improves testability." }
puts white{ bold{ "Minimize Coupling, Maximize Cohesion" } } + white{ ": It is better to reduce the amount of dependency between modules to make future changes and adaptations easier." }
puts white{ bold{ "Make it work first" } } + white{ ", then make it work fast." }
puts white{ bold{ "Data Design > " } } + white{ "Code Design" }
puts white{ bold{ "Document 'Why'" } }
puts white{ bold{ "Save early, save often" } }
puts white{ bold{ "Share early, share often" } }
# https://en.wikipedia.org/wiki/Spherical_cow
puts white{ bold{ "Avoid spherical cows" } } + white{ ": Understand the requirements, and anticipate change." }
puts white{ bold{ "Reality is that which, when you stop believing in it, doesn't go away." } } + black{ bold{ " - Philip K. Dick" } }
# opposite of moore's law, for pharma
puts white{ bold{ "Eroom’s law" } } + white{ " the number of new drugs approved per billion US dollars spent on R&D has halved roughly every nine years since 1950." }
puts white{ bold{ "Get your data structures correct first" } } + white{ ", and the rest of the program will write itself." } + black{ bold{ " - David Jones" } }
puts white{ "For 80 percent of all data sets, 95 percent of the information can be seen in a good graph." } + black{ bold{ " - William S. Cleveland, Bell Labs" } }
puts white{ "The first step in fixing a broken program is getting it to fail repeatably." } + black{ bold{ " - Tom Duff, Bell Labs" } }
puts white{ "If you've made it this far, you'll certainly appreciate this excellent advice. " } + white{ bold{ "Eschew clever rules." } } + black{ bold{ " - Joseph Henry Condon, Bell Labs" } }
puts white{ "A meeting is a refuge from 'the dreariness of labor and the loneliness of thought'." } + black{ bold{ " - Bernard Baruch, In Risen, 'A Theory on Meetings' (1970)" } }
puts white{ "The new electronic interdependence recreates the world in the image of a global village." } + black{ bold{ " - Marshall McLuhan, 'The Medium is the Message' (1967)" } }
puts white{ "Truth will sooner come out of error than from confusion." } + black{ bold{ " - Sir Francis Bacon, 'The New Organon' (1620)" } }
puts white{ "An articulated guess beats an unspoken assumption." } + black{ bold{ " - Frederick P. Brooks, 'The Design of Design: Essays from a Computer Scientist' (2010)" } }
puts white{ "Every man who rises above the common level has received two educations: the first, from his teachers; the second, more personal and important, from himself." } + black{ bold{ " - Edward Gibbons, 'Memoirs of My Life and Writings' (1789)" } }
puts white{ bold{ "Hanlon's razor" } } + black{ bold{ ": " } } + white{ "Never attribute to malice that which is adequately explained by stupidity." }
puts white{ "Hadoop bit too much? Want a simpler syntax now? " } + white{ bold{ "Use GNU Parallel" } } + white{ "." } + black{ bold{ " - Ole Tange" } }
puts white{ bold{ "Being 'disruptive' used to be a black mark on a school report." } } + white{ " Now it's a celebrated personality trait in Silicon Valley." } + black{ bold{ ' - @iamdevloper' } }
puts white{ "Experimental epistemology." } + black{ bold{ " - Sign on a door, MIT, 1952." } }
puts white{ "Discontent arises from a knowledge of the possible, as contrasted with the actual." } + black{ bold{ " - Aneurin Bevan (founder, UK NHS)" } }
puts white{ bold{ "The people have spoken" } } + white{ " ... most of it was complete gibberish." } + black{ bold{ " - Linus Torvalds, Linux-4.0-rc1 announcement (2015-02-22)" } }
puts white{ bold{ "Putting yourself in new situations constantly is the only way to ensure that you make your decisions unencumbered by the nature of habit, law, custom or prejudice" } } + white{ " – and it’s up to you to create the situations." } + black{ bold{ " - Crimethinc anarchist collective" } }
puts white{ bold{ "We don't know one millionth of one percent about anything." } } + black{ bold{ " - Thomas Edison" } }
puts white{ bold{ "The fact that something is silly doesn't mean that it should be ignored." } } + white{ " Hitler was silly. The Inquisition was stupid. The great religious wars and persecutions, I would argue, were thoroughly absurd. But they were also very terrible. The beliefs themselves may be silly or harmless, but a resurgence of medieval-type thinking is no laughing matter." } + black{ bold{ " - Robert Burnham Jr., Astronomer (1983)" } }
puts white{ bold{ "We are all children. But if we cannot be wise, we can at least be honest." } } + white{ " I accept the existence of what I call the all-pervading intelligence of the universe. The Orientals call it the Tao. To me, that is too obvious to need scientific proof. That's my religion - that and the Grand Canyon. And Yosemite. And the surf coming in with the tide. And NGC-6611." } + black{ bold{ " - Robert Burnham Jr., Astronomer (1983)" } }
puts white{ "I would say this: There is no ultimate truth about life or the universe which can be expressed in words. Whatever it is, it has to be experienced directly. Words are symbols, never to be confused with the thing itself. The most that any set of symbols can do is to point the way. " } + white{ bold{ "Your task is to walk down the road, not to worship the signpost." } } + black{ bold{ " - Robert Burnham Jr., Astronomer (1983)" } }
puts white{ bold{ "Blind monkey at the typewriter." } } + black{ bold{ " - Robert Burnham Jr., Astronomer (1983)" } }
puts white{ bold{ "May the ox of journalism always be yoked to the cart of commerce." } } + black{ bold{ " - Herman Zweibel, [fictional] publisher of 'The Onion' (satire)" } }
# http://faculty.chicagobooth.edu/luigi.zingales/papers/research/Finance.pdf
puts white{ "What can we do as a profession? First of all, acknowledge that " } + white{ bold{ "our view of the benefits of finance is inflated" } } + white{ ". While there is no doubt that a developed economy needs a sophisticated financial sector, at the current state of knowledge " } + white{ bold{ "there is no theoretical reason or empirical evidence to support the notion that all the growth of the financial sector in the last forty years has been beneficial to society" } } + white{ ". In fact, we have both theoretical reasons and empirical evidence to claim that " } + white{ bold{ "a component has been pure rent seeking" } } + white{ ". By defending all forms of finance, by being unwilling to separate the wheat from the chaff, " } + white{ bold{ "we have lost credibility" } } + white{ " in defending the real contribution of finance." } + black{ bold{ " - Luigi Zingales, 'Does Finance Benefit Society?' 2015 American Finance Association Presidential Address." } }
puts white{ "We should also be much more transparent on the negative aspects of the financial industry, from " } + white{ bold{ "rent-seeking behavior" } } + white{ " to " } + white{ bold{ "captured regulation" } } + white{ ", from " } + white{ bold{ "inefficient boards" } } + white{ " to " } + white{ bold{ "outright fraud" } } + white{ "." } + black{ bold{ " - Luigi Zingales, 'Does Finance Benefit Society?' 2015 American Finance Association Presidential Address." } }
puts white{ "They will say that because of my lack of book learning, I cannot properly express what I desire to treat of. " } + white{ bold{ "Do they not know that my subjects require for their exposition experience rather than the words of others?" } } + white{ " And since experience has been the mistress, and to her in all points make my appeal." } + black{ bold{ " - Leonardo Da Vinci" } }
# http://blog.revolutionanalytics.com/2011/04/the-plural-of-anecdote-is-data-after-all.html
puts white{ "The plural of anecdote is data." } + black{ bold{ " - Raymond Wolfinger (1969)" } }
puts white{ bold{ "EIE_IO" } } + white{ ": With a SYNC SYNC here... and a SYNC SYNC there..." } + black{ bold{ " - CP-6 OS's communications software, synchronous-terminal (BISYNC) module source code" } }
puts white{ bold{ "There are three things that no one can advise another person for or against." } } + white{ " One is marriage, another is waging war and the third is visiting the Holy Sepulchre. These things often end badly." } + black{ bold{ " - Eberhard, Count of Wurttemberg (1480)." } }
puts white{ bold{ "Batch jobs and message queues give me 80% of the benefit of 'microservices'" } } + white{ " with only 5% of the pain." } + black{ bold{ " - daxfohl, Hacker News (2015-10-06)" } }
puts white{ bold{ "Man is at his vilest when he erects a billboard." } } + white{ " When I retire from Madison Avenue, I am going to start a secret society of masked vigilantes who will travel around the world on silent motor bicycles, chopping down posters at the dark of the moon." } + black{ bold{ " - David Ogilvy" } }
puts white{ "All old-established national industries have been destroyed or are daily being destroyed. They are dislodged by new industries, whose introduction becomes a life and death question for all civilised nations, by industries that no longer work up indigenous raw material, but raw material drawn from the remotest zones; industries whose products are consumed, not only at home, but in every quarter of the globe. " } + white{ bold{ "In place of the old wants, satisfied by the production of the country, we find new wants, requiring for their satisfaction the products of distant lands and climes. In place of the old local and national seclusion and self-sufficiency, we have intercourse in every direction, universal inter-dependence of nations. And as in material, so also in intellectual production. The intellectual creations of individual nations become common property." } } + white{ " National one-sidedness and narrow-mindedness become more and more impossible, and from the numerous national and local literatures, there arises a world literature." } + black{ bold{ " - 'The Communist Manifesto', Karl Marx and Frederick Engels (1848)" } }
puts white{ bold{ "Sometimes paranoia's just having all the facts." } } + black{ bold{ " - William S. Burroughs" } }
puts white{ bold{ "Go play with it yourself." } } + black{ bold{ " - Joseph Henry Condon, Bell Labs" } }
puts white{ bold{ "It's a paradox to be an artist working through the medium of machinery" } } + white{ " - but the paradox is where the sons of bitches have hidden all the oxygen. It may be crazy here, but we can breathe in here. Because the old art is no longer working, and the old science is no longer funded, and politics are a debacle, and the culture is at its wits' end." } + black{ bold{ " - Bruce Sterling (1995)" } }
puts white{ "foo walks into a bar" } + black{ bold{ ' - @iamdevloper' } }
puts white{ bold{ "nomads" } } + white{ ": people who have larger collections of coffee shop wifi passwords than clothes" } + black{ bold{ ' - @jongold' } }
puts white{ bold{ "The software development process" } } + white{ ": I can't fix this. " } + black{ bold{ "*crisis of confidence* *questions career* *questions life*" } } + white{ " Oh it was a typo, cool." } + black{ bold{ ' - @iamdevloper' } }
puts white{ "On the 7th day, God did a sprint retrospective." } + black{ bold{ ' - @iamdevloper' } }
puts white{ "What's a dinosaur's favourite file format?" } + white{ bold{ " .rar" } } + black{ bold{ ' - @iamdevloper' } }
puts white{ "Asking a developer you've approached because of their work to do a code puzzle is like asking a surgeon to complete a game of Operation." } + black{ bold{ ' - @iamdevloper' } }
puts white{ "Give a man a fish and you feed him for a day, teach a man to fish and you feed him for a lifetime, " } + white{ bold{ "give a startup $$ and they'll waste it." } } + black{ bold{ ' - @iamdevloper' } }
puts white{ "If your commit message is more than 15 words you should probably just write it down and read it to your therapist." } + black{ bold{ ' - @iamdevloper' } }
puts white{ "What do we want?" } + white{ bold{ " ASYNCHRONICITY!" } } + white{ " When do we want it? " } + white{ bold{ "THAT'S IRRELEVANT." } } + black{ bold{ ' - @iamdevloper' } }
puts white{ "What is 2+2? " } + black{ bold{ "Engineer: " } } + white{ "4.000000" } + black{ bold{ " Manager: " } } + white{ "around 4" } + black{ bold{ " Accountant:" } } + white{ "What do you want it to be?" } + black{ bold{ ' - @iamdevloper' } }
puts white{ "QA teams represent the alienation of product teams from their labor." } + black{ bold{ " - Startup Marx" } }
puts white{ "Values aren't achieved through specialization. " } + white{ bold{ "Imagine a VP of teamwork." } } + black{ bold{ " - Startup L. Jackson" } }
puts white{ "Let's base our entire SDLC off of a product meant for tracking bugs." } + black{ bold{ " - David J. Bland" } }
puts white{ "Days since array index errors: " } + white{ bold{ "-1" } } + black{ bold{ ' - @iamdevloper' } }
puts white{ "Programming is like endless detangling of Christmas lights." } + black{ bold{ " - Fred Willerup" } }
puts white{ bold{ "$1" } } + white{ ": Not sure if currency or regex capture group." } + black{ bold{ " - @iamdevloper" } }
puts white{ bold{ "1998" } } + white{ ": Don't get in strangers' cars. Don't meet people from the internet. " } + white{ bold{ "2016" } } + white{ ": Literally summon strangers from internet to get in their car." }
puts white{ bold{ "Things that don't exist" } } + white{ ": Unit tests, DRY, TDD." }
puts white{ "A JavaScript developer walks into a bar. By the time they go to order, the bar is abandoned and out-of-date." } + black{ bold{ " - @iamdevloper" } }
puts white{ bold{ "2003" } } + white{ ": I replaced you with a set of very small shell scripts." } + white{ bold{ " 2013" } } + white{ ": I replaced your scripts with a six-figure enterprise DevOps platform." } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ bold{ "What kind of meat comes on the Functional Object Burger? " } } + white{ "Lamb, duh." } + black{ bold{ " - @hipsterhacker" } }
puts white{ "Erlang is better than yer lang." } + black{ bold{ " - @hipsterhacker" } }
puts white{ "I can't believe your Caps Lock key hasn't been remapped yet." } + black{ bold{ " - @hipsterhacker" } }
puts white{ "They say the dream of the 90's is alive in Portland, but I haven't met a single Java developer here." } + black{ bold{ " - @hipsterhacker" } }
puts white{ bold{ "For angel investors" } } + white{ ": A startup's value is inversely proportional to the # of people wearing business casual." } + black{ bold{ " - @hipsterhacker" } }
puts white{ "Common Lisp is making a comeback like bellbottoms, pubic hair, and the unholy alliance of mustaches and androgyny." } + black{ bold{ " - @hipsterhacker" } }
puts white{ "Android's spellchecker doesn't know the word 'quinoa', but iPhone's does. I'm guessing the same can be said for their respective users." } + black{ bold{ " - @hipsterhacker" } }
puts white{ bold{ "Only old people need money to get a startup going. " } } + white{ "Venture capital? More like denture capital." } + black{ bold{ " - @hipsterhacker" } }
puts white{ bold{ "I write world-changing applications in languages you have probably not yet heard of." } } + white{ " My code is poetry, meanwhile yours is oh-noetry." } + black{ bold{ " - @hipsterhacker" } }
puts white{ bold{ "Comedy" } } + white{ ": You, trying to launch a startup from scratch using Java. " } + white{ bold{ "Tragedy" } } + white{ ": Me, trying to debug 27k lines of legacy Perl that brings $113MM/yr" } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ bold{ "Did you hear about the C programmer who broke their ARM?" } } + white{ " They were volatile because they had an unsigned cast." } + black{ bold{ " - @silentbicycle" } }
puts white{ bold{ "Q" } } + white{ ": What LAN protocol was forged in the fires of Mount Doom? " } + white{ bold{ "A" } } + white{ ": Tolkien ring." } + black{ bold{ " - @aloria" } }
puts white{ bold{ "Best kind of engineers to work with" } } + white{ ": 40yo parents who actually know how computers work. " } + white{ bold{ "Worst kind" } } + white{ ": 22yo kids who love javascript frameworks." } + black{ bold{ " - @rogerclark" } }
puts white{ "CentOS in the streets, " } + white{ bold{ "Gentoo in the sheets" } } + white{ "." } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ bold{ "What's bower?" } } + white{ " A package manager, install it with npm. " } + white{ bold{ "What's npm?" } } + white{ " A package manager, install it with brew. " } + white{ bold{ "What's brew?" } } + white{ " ... " } + black{ bold{ " - @ddprtt" } }
puts white{ "Wait... are you saying that you don't write tests for your shell scripts? How do you know if they're correct?" } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ "A machine learning researcher, a crypto-currency expert, and an Erlang programmer walk into a bar. Facebook buys the bar for $27 billion." } + black{ bold{ " - @ML_Hipster" } }
puts white{ 'The filth of their mongrel LISPs and NoSQL will foam up about their waists, and their VCs will shout "Save us!" ...and I\'ll whisper "No."' } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ "Works fine for me locally. Sounds like an ops problem. I'm going to lunch." } + black{ bold{ " - @hipsterhacker" } }
puts white{ "Did you know Richard Stallman is developing a free open source Unix-like OS? No? I guess you hadn't...Hurd." } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ bold{ "BREAKING" } } + white{ ": Linux version upgrades still free." } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ "Company seeks Neutral-aligned Level 60 Half-Elf Assassin/Mage for VC-backed, webscale-tier campaign. No munchkins, please. " } + white{ bold{ "(sponsored tweet)" } } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ "Those who can't code, sysadmin. And those who can't sysadmin, sysadmin Windows." } + black{ bold{ " - @NeckbeardHacker" } }
puts white{ bold{ "Immuteability" } } + white{ ": The property of functional programmers that prevents them from shutting up about pure functional programming." } + black{ bold{ " - @raganwald" } }
puts white{ "Knowing what to code is more important than knowing how to code." } + black{ bold{ " - @pmddomingos" } }
puts white{ bold{ "Optimist" } } + white{ ": The glass is half full. " } + white{ bold{ "Pessimist" } } + white{ ": The glass is half empty. " } + white{ bold{ "Engineer" } } + white{ ": The glass is too large." } + black{ bold{ " - @pmddomingos" } }
puts white{ "Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love." } + black{ bold{ " - @petecordell" } }
puts white{ bold{ "boondoggle" } } + white{ " (n): work or activity that is wasteful or pointless but gives the appearance of having value" }
puts white{ bold{ "Rule #8" } } + white{ ": Try not to create and analyze at the same time. They are different processes." } + black{ bold{ " - John Cage" } }
puts white{ "The essence of philosophy is that " } + white{ bold{ "a man should so live that his happiness shall depend as little as possible on external things" } } + white{ "." } + black{ bold{ " - Ἐπίκτητος/Epictetus, Stoic philosopher born a slave (55-135)" } }
puts white{ "One argues because one is confused." } + white{ bold{ " The man who knows does not argue" } } + white{ ";" } + white{ bold{ " the man who argues does not know." } } + black{ bold{ " - Lin Yutang, 'Pleasures of a Nonconformist' (1962)" } }
puts white{ "Each thing we see hides something else we want to see." } + black{ bold{ " - René Magritte, surrealist" } }
puts white{ "We are surrounded by curtains. " } + white{ bold{ "We only perceive the world behind a curtain of semblance. At the same time, an object needs to be covered in order to be recognized at all." } } + black{ bold{ " - René Magritte, surrealist" } }
puts white{ "The easiest person to deceive is one's own self." } + black{ bold{ " - Edward Bulwer-Lytton" } }
puts white{ "Beware that you do not lose the substance by grasping at the shadow." } + black{ bold{ " - Aesop" } }
puts white{ bold{ "Censorship" } } + black{ bold{ ':' } } + white{ " panacea of the autocrat, fear of the progressive, joke of the youth." } + black{ bold{ " - @ccvannorman" } }
puts white{ bold{ "Heilmeier Catechism" } } + black{ bold{ ": " } } + white{ "(1) What are you trying to do? Articulate your objectives using absolutely no jargon. What is the problem? Why is it hard? (2) How is it done today, and what are the limits of current practice? (3) What's new in your approach and why do you think it will be successful? (4) Who cares? (5) If you're successful, what difference will it make? What impact will success have? How will it be measured? (6) What are the risks and the payoffs? (7) How much will it cost? (8) How long will it take? (9) What are the midterm and final 'exams' to check for success? How will progress be measured?" } + black{ bold{ " - George H. Heilmeier, Director of ARPA, 1970s" } }
puts white{ bold{ "Some people never go crazy." } } + white{ " What truly horrible lives they must live." } + black{ bold{ " - 'Barfly' (1987)" } }
puts white{ bold{ "Anybody can be a nondrunk." } } + white{ " It takes a special talent to be a drunk. It takes endurance. Endurance is more important than truth." } + black{ bold{ " - 'Barfly' (1987)" } }
puts white{ bold{ "They speak to us with the absolute authority of the computer" } } + white{ ", and we bow down before them. They are god's own gift to the faker." } + black{ bold{ " - Orson Welles on art experts, 'F for Fake' (1973)" } }
puts white{ "Startups mostly don't compete against each other, they compete against no one giving a shit." } + black{ bold{ " - Justin Kan" } }
puts white{ bold{ "Engineers are pretty arrogant." } } + white{ " Like, I would never want to hang out with those guys for a minute, outside of work. In most cases, in most jobs I had." } + black{ bold{ " - 'Engineered Truth'" } }
puts white{ bold{ "A great many people think they are thinking when they are really rearranging their prejudices." } } + black{ bold{ " - William James" } }
puts white{ bold{ "Why do we host on AWS?" } } + white{ " Because if it goes down then our customers are so busy worried about themselves being down that they don't even notice that we're down!" }
puts white{ bold{ "Banking has always orientated towards cartel structures with high synthetic start-up capital costs, because the good the sector ultimately provides (trust) has a zero marginal cost of production." } } + white{ " This renders the industry uniquely vulnerable to undercutting." } + black{ bold{ " - Izabella Kaminska, Financial Times" } }
puts white{ bold{ "Why don't computers crash at the same time?" } } + white{ " Because network connections aren't fast enough." } + black{ bold{ " - 1980s computing joke" } }
puts white{ bold{ "Robot" } } + white{ ", n. A machine that doesn't work yet." } + black{ bold{ " (Because if it worked you'd name it after what it does, like a dishwasher or a vacuum cleaner)." } }
puts white{ bold{ "Never underestimate the power of being one of the few people to have a particular set of individually-common skills." } } + white{ " If you know molecular biology and group theory, or chemical engineering and architecture, or web design and sign language, or whatever and whatever, there's special opportunities open to you and almost noone else." } + black{ bold{ " - @maxander" } }
puts white{ "Your margin is my opportunity." } + black{ bold{ " - Jeff Bezos" } }
puts white{ bold{ "I am enough of the artist to draw freely upon my imagination." } } + white{ " Imagination is more important than knowledge. Knowledge is limited. Imagination encircles the world." } + black{ bold{ " - Albert Einstein (1929)" } } # http://quoteinvestigator.com/2013/01/01/einstein-imagination/
puts white{ "The practical genius is not someone who knows everything but knows where to find it." }
puts white{ "Inside every utopia is a dystopia striving to get out." } # http://bostonreview.net/literature-culture/john-crowley-inside-every-utopia-dystopia
puts white{ "We are faced with an insurmountable opportunity." } + black{ bold{ " - Walter Crawford Kelly, Jr., American animator and cartoonist" } }
puts white{ "An engineer is a man who can do for a dime what any fool can do for a dollar." }

# Ashwin Parameswaran (2012) @ http://www.macroresilience.com/2012/02/21/the-control-revolution-and-its-discontents-the-uncanny-valley/
puts "------ ashwin parameswaran -------"
puts white{ "The current wave of reducing everything to a combination of 'data & algorithm' and tackling every problem with more data and better algorithms is the logical end-point of the control revolution that started in the 19th century." } + black{ bold{ " - Ashwin Parameswaran (2012)" } }
puts white{ bold{ "Creative destruction occurs despite our best efforts to stamp it out." } } + white{ " In a sense, disruption is an outsider to the essence of the industrial and post-industrial period of the last two centuries, the overriding philosophy of which is automation and algorithmisation aimed at efficiency and control." } + black{ bold{ " - Ashwin Parameswaran (2012)" } }
puts white{ bold{ "The endogenous nature of [the] buildup of complexity eventually makes the system fundamentally illegible to the human operator" } } + white{ " - a phenomenon that is ironic given that the fundamental aim of the control revolution is to increase legibility." } + black{ bold{ " - Ashwin Parameswaran (2012)" } }
puts white{ bold{ "Near-optimal robustness in both natural and economic systems is not achieved with simplistically diverse agent compositions or with significant redundancies or slack at agent level." } } + black{ bold{ " - Ashwin Parameswaran (2012)" } }
puts white{ bold{ "The key to achieving resilience with near-optimal configurations is to tackle disturbances and generate novelty/innovation with an an emergent systemic response that reconfigures the system rather than simply a localised response." } } + black{ bold{ " - Ashwin Parameswaran (2012)" } }
puts white{ "Eventually mean/median system performance deteriorates as more and more pure slack and redundancy needs to be built in at all levels to make up for the irreversibly fragile nature of the system. " } + white{ bold{ "The business cycle is an oscillation between efficient fragility and robust inefficiency." } } + white{ " Over the course of successive cycles, both poles of this oscillation get worse which leads to median/mean system performance falling rapidly at the same time that the tails deteriorate due to the increased illegibility of the automated system to the human operator." } + black{ bold{ " - Ashwin Parameswaran (2012)" } }

# how complex systems fail @ http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf
puts "------ how complex systems fail -----"
puts white{ bold{ "Complex systems are intrinsically hazardous systems." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Complex systems are heavily and successfully defended against failure." } } + white{ " The high consequences of failure lead over time to the construction of multiple layers of defense against failure. These defenses include obvious technical components (e.g. backup systems, 'safety' features of equipment) and human components (e.g. training, knowledge) but also a variety of organizational, institutional, and regulatory defenses (e.g. policies and procedures, certification, work rules, team training)." } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Catastrophe requires multiple failures." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Complex systems contain changing mixtures of failures latent within them." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Complex systems run in degraded mode." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Catastrophe is always just around the corner." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Post-accident attribution to a 'root cause' is fundamentally wrong." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Hindsight biases post-accident assessments of human performance." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Human operators have dual roles" } } + black{ bold{ ": " } } + white{ "as producers of and as defenders against failure." } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "All practitioner actions are gambles" } } + black{ bold{ ": " } } + white{ "acts that take place in the face of uncertain outcomes." } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Human practitioners are the adaptable element of complex systems." } } + white{ " Some of these adaptations include: (1) " } + white{ bold{ "Restructuring the system" } } + white{ " in order to reduce exposure of vulnerable parts to failure. (2) " } + white{ bold{ "Concentrating critical resources" } } + white{ " in areas of expected high demand. (3) " } + white{ bold{ "Providing pathways for retreat or recovery" } } + white{ " from expected and unexpected faults. (4) " } + white{ bold{ "Establishing means for early detection" } } + white{ " of changed system performance in order to allow graceful cutbacks in production or other means of increasing resiliency." } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Human expertise in complex systems is constantly changing." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Change introduces new forms of failure." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Safety is a characteristic of systems and not of their components." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }
puts white{ bold{ "Failure free operations require experience with failure." } } + black{ bold{ " - Richard I. Cook, MD. 'How Complex Systems Fail'." } }

# scott allen
puts "------ scott allen ------"
puts white{ "A project is complete when it starts working for you, rather than you working for it." } + black{ bold{ " - Scott Allen" } }
puts white{ "Done is better than perfect." } + black{ bold{ " - Scott Allen" } }
puts white{ "Sometimes it takes an expert to point out the obvious." } + black{ bold{ " - Scott Allen" } }

# gary gygax
puts "------ gary gygax ------"
puts white{ "Random chance plays a huge part in everybody's life." } + black{ bold{ " - Gary Gygax, inventor of D&D" } }
puts white{ "The secret we should never let the gamemasters know is that they don't need any rules." } + black{ bold{ " - Gary Gygax, inventor of D&D" } }
puts white{ "I hated school, didn't like the discipline." } + black{ bold{ " - Gary Gygax, inventor of D&D" } }

# buckminster fuller
puts "------ buckminster fuller ------"
puts white{ "When I am working on a problem, I never think about beauty but when I have finished, " } + white{ bold{ "if the solution is not beautiful, I know it is wrong" } } + white{ "." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "A designer is an emerging synthesis of artist, inventor, mechanic, objective economist and evolutionary strategist." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "How often I found where I should be going only by setting out for somewhere else." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "Don't fight forces, use them." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ bold{ "One in ten thousand of us can make a technological breakthrough capable of supporting all the rest." } } + white{ " The youth of today are absolutely right in recognizing this nonsense of earning a wage." } + black{ bold{ " - R. Buckminster Fuller (1960s?)" } }
puts white{ "What usually happens in the educational process is that the faculties are dulled, overloaded, stuffed and paralyzed so that by the time most people are mature they have lost their innate capabilities." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "We are called to be architects of the future, not its victims." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "There is nothing in a caterpillar that tells you it's going to be a butterfly." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "Search others for their virtue, and yourself for your vices." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "Everyone is born a genius, but the process of living de-geniuses them." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "If you are the master be sometimes blind, if you are the servant be sometimes deaf." } + black{ bold{ " - R. Buckminster Fuller" } }
puts white{ "People should think things out fresh and not just accept conventional terms and the conventional way of doing things." } + black{ bold{ " - R. Buckminster Fuller" } }

# edwin land
puts "------ edwin land -------"
puts white{ "Don't undertake a project unless it is manifestly important and nearly impossible." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "An essential aspect of creativity is not being afraid to fail." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "Any problem can be solved using the materials in the room." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "Creativity is the sudden cessation of stupidity." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "Politeness is the poison of collaboration." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "Marketing is what you do when your product is no good." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "Science is a method to keep yourself from kidding yourself." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "The most important thing about power is to make sure you don't have to use it." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "It's not that we need new ideas, but we need to stop having old ideas." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }
puts white{ "If you dream of something worth doing and then simply go to work on it and don't think anything of personalities, or emotional conflicts, or of money, or of family distractions; it is amazing how quickly you get through those 5,000 steps." } + black{ bold{ " - Edwin Land, founder of Polaroid" } }

# comp sci courses that don't exist - but should
puts "------ comp sci courses that don't exist but should ------"
puts white{ bold{ "CSCI 2100: Unlearning Object-Oriented Programming" } } + white{ " - Discover how to create and use variables that aren't inside of an object hierarchy. Learn about 'functions,' which are like methods but more generally useful. Prerequisite: Any course that used the term 'abstract base class.'" } + black{ bold{ " - James Hague" } }
puts white{ bold{ "CSCI 3300: Classical Software Studies" } } + white{ " - Discuss and dissect historically significant products, including VisiCalc, AppleWorks, Robot Odyssey, Zork, and MacPaint. Emphases are on user interface and creativity fostered by hardware limitations." } + black{ bold{ " - James Hague" } }
puts white{ bold{ "CSCI 4020: Writing Fast Code in Slow Languages" } } + white{ " - Analyze performance at a high level, writing interpreted Python that matches or beats typical C++ code while being less fragile and more fun to work with." } + black{ bold{ " - James Hague" } }
puts white{ bold{ "CSCI 2170: User Experience of Command Line Tools" } } + white{ " - An introduction to UX principles as applied to command line programs designed as class projects. Core focus is on output relevance, readability, and minimization. UNIX 'ls' tool is a case study in excessive command line switches." } + black{ bold{ " - James Hague" } }
puts white{ bold{ "PSYC 4410: Obsessions of the Programmer Mind" } } + white{ " - Identify and understand tangential topics that software developers frequently fixate on: code formatting, taxonomy, type systems, splitting projects into too many files. Includes detailed study of knee-jerk criticism when exposed to unfamiliar systems." } + black{ bold{ " - James Hague" } }

# machine learning
puts "------ machine learning ------"
puts white{ 'What idiot called it "deep learning hype" and not "backpropaganda"?' } + black{ bold{ " - @nsaphra" } }
puts white{ bold{ "You threaten my startup with patents & debt?" } } + white { " I've chosen my models carefully. Perhaps you should have done the same." } + black{ bold{ ' - @ML_Hipster' } }
puts white{ "Adverserial training = gradient dissent." } + black{ bold{ ' - @ylecun' } }
puts white{ "A recent meta-analysis of empirical results in scientific papers showed 36% were 'lies', 27% 'damned lies', and 37% 'other'." } + black{ bold{ ' - @ML_Hipster' } }
puts white{ "A good learner is forever walking the narrow path between blindness and hallucination." } + black{ bold{ ' - @sanderiam' } }
puts white{ "He who controls the data controls the learner." } + black{ bold{ ' - @pmddomingos' } }
puts white{ bold{ "Q" } } + white{ ": Why did the deep net cross the road? " } + white{ bold{ "A" } } + white{ ": We don't know. But look, it did it really well..." } + black{ bold{ ' - @cogconfluence' } }
puts white{ "The Turing test is like saying planes don't fly unless they can fool birds into thinking they're birds." } + black{ bold{ " - Peter Norvig" } }
puts white{ "Using weighted majority to evaluate MOOCs that teach sequential prediction. It's online learning of online learning for online learning." } + black{ bold{ ' - @ML_Hipster' } }
puts white{ bold{ "Q" } } + white{ ": How many machine learners does it take to change a lightbulb? " } + white{ bold{ "A" } } + white{ ": Isn't that a database thing?" } + black{ bold{ ' - @ML_Hipster' } }
puts white{ bold{ "This ML algorithm is rated R." } } + white{ " It contains: Strong assumptions, frequent sampling, and matrix inversions. Restricted to masochistic users." } + black{ bold{ " - @ML_Hipster" } }
puts white{ "Thinking of changing my business cards to read: " } + white{ bold{ "Freelance Datamancer"} } + white{ "." } + black{ bold{ " - @ML_Hipster" } }

# snowden
puts "----- edward snowden -----"
puts white{ "For me, it all comes down to state power against " } + white{ bold{ "the people's ability to meaningfully oppose" } } + white{ " that power." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ bold{ "I remember what the internet was like before it was being watched and there's never been anything in the history of man that's like it." } } + white{ " [...] It was free and unrestrained, and we've seen the chilling of that, the cooling of that, the changing of that model towards something in which people self-police their views and they literally make jokes about ending up on 'the list' if they donate to a political cause or if they say something in a discussion, and it's become an expectation that we're being watched." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ bold{ "Technology is increasingly providing us [with] the ability to encode our rights not just in to our laws but in to our systems." } } + white{ " So when the failure of black letters on a page becomes apparent, we still have the failsafe of our technological systems, the systems that we surround ourselves [with] and rely upon every day." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "Policy is a very weak protection." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "Policy is a one-way ratchet that only loosens over time." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "Government never places additional restrictions on itself... unprovoked." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "Many people I've talked to have told me that they're careful about what they type in to search engines because they know that it's being recorded. That limits the boundaries of their intellectual exploration." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "I'm more willing to risk imprisonment (or any other negative outcome) personally than I am willing to risk the curtailment of my intellectual freedom and that of those around me who I care for equally as I do for myself." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "I feel good in my human experience to know that I can contribute to the good of others." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "I have some strongly held views." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }
puts white{ "The balance of power between the citizenry and the government is becoming that of the ruling and the ruled, as opposed to the elected and the electorate." } + black{ bold{ " - Edward Snowden, NSA whistleblower" } }

# paul graham
puts "----- paul graham -----"
puts white{ bold{ "The winds of change originate in the unconscious minds of domain experts." } } + white{ " If you're sufficiently expert in a field, any weird idea or apparently irrelevant question that occurs to you is ipso facto worth exploring." } + black{ bold{ " - Paul Graham (2014) " } } # http://paulgraham.com/ecw.html
puts white{ bold{ "The people I've met who do great work…" } } + white{ " generally feel that they're stupid and lazy, that their brain only works properly one day out of ten, and that it’s only a matter of time until they’re found out." } + black{ bold{ " - Paul Graham (2004) " } } # http://web.archive.org/web/20040728182546/http://www.paulgraham.com/gh.html (later edited out)
puts white{ bold{ "It's particularly hard for hackers to know how good they are" } } + white{ ", because it's hard to compare their work." } + black{ bold{ " - Paul Graham (2004) " } } # http://www.paulgraham.com/gh.html
puts white{ "When you reach the point where 90% of a group's output is created by 1% of its members, you lose big if something (whether Viking raids, or central planning) drags their productivity down to the average." } + black{ bold{ " - Paul Graham (2004)" } }
puts white{ bold{ "I read a quote by Wittgenstein saying that he had no self-discipline and had never been able to deny himself anything, not even a cup of coffee." } } + white{ " Now I know a number of people who do great work, and it's the same with all of them. They have little discipline. They're all terrible procrastinators and find it almost impossible to make themselves do anything they're not interested in." } + black{ bold{ " - Paul Graham (2005)" } } # http://www.paulgraham.com/hs.html
puts white{ bold{ "Great hackers also generally insist on using open source software." } } + white{ " Not just because it's better, but because it gives them more control. " } + white{ bold{ "Good hackers insist on control." } } + white{ " This is part of what makes them good hackers: when something's broken, they need to fix it." } + black{ bold{ " - Paul Graham (2004) " } } # http://www.paulgraham.com/gh.html
puts white{ "We now have several examples to prove that amateurs can surpass professionals, when they have the right kind of system to channel their efforts. Wikipedia may be the most famous. " } + white{ bold{ "Experts have given Wikipedia middling reviews, but they miss the critical point: it's good enough. And it’s free, which means people actually read it." } } + white{ " On the web, articles you have to pay for might as well not exist. Even if you were willing to pay to read them yourself, you can’t link to them. They're not part of the conversation." } + black{ bold{ " - Paul Graham (2005) " } } # http://www.paulgraham.com/web20.html

# peter thiel on tech/business/society
puts "----- peter thiel -----"
puts white{ bold{ "The eccentric university professor is a species that is going extinct fast." } } + black{ bold{ " - Peter Thiel (2014)" } }
puts white{ bold{ "Most MBA's tend to be high extrovert/low conviction people" } } + white{ " - a combination that in my experience leads towards extremely herd-like thinking and behavior." } + black{ bold{ " - Peter Thiel (2014)" } }
puts white{ bold{ "Most companies are killed by internal infighting, even though it may not seem like it." } } + black{ bold{ " - Peter Thiel" } }

# randoms on time
puts "----- randoms on time -----"
puts white{ bold{ "He who does not have a past has no present or future." } } + black{ bold{ " - Arabic proverb" } }
puts white{ bold{ "Man's most prudent counselor is time." } } + black{ bold{ " - Publilius Syrus (first century BCE)" } }
puts white{ bold{ "There is nothing which the lapse of time will not either extinguish or improve." } } + black{ bold{ " - Publilius Syrus (first century BCE)" } }
puts white{ bold{ "Those who do not forget the past are masters of the future." } } + black{ bold{ " - Sima Qian (second century BCE)" } }
puts white{ bold{ "Hanson's Treatment of Time" } } + white{ ": There are never enough hours in a day, but always too many days before Saturday." }
puts white{ "Of course hardened mariners would have thrashed up through the night without a tremor, hardened mariners would have battled in stinging spray and sodden clothes, hardened mariners would have reached a haven as dawn was breaking. " } + white{ bold{ "What a terrible affliction, to be a hardened mariner!" } } + black{ bold{ " - W. I. B. Crealock, 'Vagabonding Under Sail' (1951)" } }
puts white{ "Upon arriving in the capital-F Future, we discover it, invariably, to be the lowercase now." } + black{ bold{ " - William Gibson" } }
# http://www.economist.com/news/christmas-specials/21636612-time-poverty-problem-partly-perception-and-partly-distribution-why?fsrc=scn/tw/te/pe/ed/whyiseveryonesobusy
puts white{ "Lean back under a tree, put your arms behind your head, wonder at the pass we've come to, smile and remember that " } + white{ bold{ "the beginnings and ends of man's every great enterprise are untidy" } } + white{ "." } + black{ bold{ " - Sebastian de Grazia (1962)" } }
puts white{ "Even a broken clock is right twice a day." }
puts white{ "Archiving is the new folk art." } + black{ bold{ " - Rick Prelinger" } }

# re-sectionize
puts "----- eponymous randoms -----"

# abrams' principle
puts white{ bold{ "Abrams' Principle" } } + white{ ": The shortest distance between two points is off the wall." }

# allen's axiom / cahn's axiom
#puts white{ bold{ "Allen's Axiom" } } + white{ ": When all else fails, read the directions." }
puts white{ bold{ "Cahn's Axiom" } } + white{ ": When all else fails, read the instructions." }

# anthony's law of force
puts white{ bold{ "Anthony's Law of Force" } } + white{ ": Don't force it; get a larger hammer." }

# arnold's law of documentation
puts white{ bold{ "Arnold's Law of Documentation" } } + white{ ": If it should exist, it doesn't. If it does exist, it's out of date. Only documentation for useless programs transcends the first two laws." }

# atwood's law
puts white{ bold{ "Atwood's Law" } } + white{ ": Any software that can be written in JavaScript will eventually be written in JavaScript." } + black{ bold{ " - Jeff Atwood" } }

# boob's law
puts white{ bold{ "Boob's Law" } } + white{ ": You always find something in the last place you look." }

# boren's laws
puts white{ bold{ "Boren's Laws" } } + white{ ": When in charge, ponder. When in trouble, delegate. When in doubt, mumble." }

# bradley's bromide
puts white{ bold{ "Bradley's Bromide" } } + white{ ": If computers get too powerful, we can organize them into a committee - that will do them in." }

# brewer's theorem (cap theorem)
puts white{ bold{ "CAP Theorem (Brewer's Theorem)" } } + white{ ': it is impossible for a distributed computer system to simultaneously provide Consistency (all nodes see the same data at the same time), Availability (a guarantee that every request receives a response about whether it was successful or failed) and Partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)' } + black{ bold{ " - Eric Brewer, Symposium on Principles of Distributed Computing (PODC) (2000)" } }
puts white{ bold{ "CAP Theorem (Brewer's Theorem) - Clarification 1" } } + white{ ": Because Partitions are rare, there is little reason to forfeit Consistency or Availability when the system is not partitioned." } + black{ bold{ " - Eric Brewer, IEEE Computer Society 'Computer' Magazine (2012)" } }
puts white{ bold{ "CAP Theorem (Brewer's Theorem) - Clarification 2" } } + white{ ": The choice between Consistency and Availability can occur many times within the same system at very fine granularity; not only can subsystems make different choices, but the choice can change according to the operation or even the specific data or user involved." } + black{ bold{ " - Eric Brewer, IEEE Computer Society 'Computer' Magazine (2012)" } }
puts white{ bold{ "CAP Theorem (Brewer's Theorem) - Clarification 3" } } + white{ ": All three properties (Consistency, Availability, Partition tolerance) are more continuous than binary. Availability is obviously continuous from 0 to 100 percent, but there are also many levels of Consistency, and even Partitions have nuances, including disagreement within the system about whether a Partition exists." } + black{ bold{ " - Eric Brewer, IEEE Computer Society 'Computer' Magazine (2012)" } }

# brooks' law
puts white{ bold{ "Adding manpower to a late software project makes it later." } } + white{ " Nine women can't make a baby in one month." } + black{ bold{ " - Fred Brooks, 'The Mythical Man-Month' (1975)" } }
# snarky restatement
puts white{ "What one programmer can do in one month, two programmers can do in two months." } + black{ bold{ " - Fred Brooks" } }

# celine's laws @ https://en.wikipedia.org/wiki/Celine%27s_laws
puts white{ bold{ "Celine's first law" } } + white{ ": National Security is the chief cause of national insecurity." }
puts white{ bold{ "Celine's second law" } } + white{ ": Communication is possible only in a non-punishing situation." }
# generalized restatement
puts white{ bold{ "Celine's second law" } } + white{ " (restatement): Communication occurs only between equals." }
puts white{ bold{ "Celine's third law" } } + white{ ": An honest politician is a national calamity." }

# classen's law
puts white{ bold{ "Classen's Law" } } + white{ ": Usefulness = log(Technology)" } + black{ bold{ " - Theo A. C. M. Claasen, CTO of Philips Semiconductors (1999)" } }

# conway's law
puts white{ bold{ 'Conway\'s Law' } } + white{ ': Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.' } + black{ bold{ " - Melvin Conway, 'National Symposium on Modular Programming', 1968" } }
puts white{ bold{ 'The organization of the software and the organization of the software team will be congruent.' } } + black{ bold{ " - Eric S. Raymond, paraphrasing Conway's Law in 'The New Hacker's Dictionary'" } }
puts white{ 'If the parts of an organization (e.g. teams, departments, or subdivisions) do not closely reflect the essential parts of the product, or if the relationship between organizations do not reflect the relationships between product parts, then the project will be in trouble... therefore: ' } + white{ bold{ 'Make sure the organization is compatible with the product architecture.' } } + black{ bold{ ' - James O. Coplien and Neil B. Harrison, paraphasing Conway\'s Law (2004)' } }

# dredmorbius' dialectic @ https://news.ycombinator.com/item?id=8295375
puts white{ bold{ "Dredmorbius' Dialectic" } } + white{ ": Ultimately, the resources required to maintain a system prove insufficient." }

# ducharm's axiom
puts white{ bold{ "Ducharm's Axiom" } } + white{ ": If you view your problem closely enough you will recognize yourself as part of the problem." }

# dykstra's observation
puts white{ bold{ "Dykstra's Observation" } } + white{ ": If debugging is the process of removing bugs, then programming must be the process of putting them in." }

# farber
puts white{ bold{ "Farber's Rule" } } + white{ ": Necessity is the mother of strange bedfellows." }

# farvour's law
puts white{ bold{ "Farvour's Law of Debugging" } } + white{ ": There is always one more bug..." }

# finagle's four laws
puts white{ bold{ "Finagle's First Law" } } + white{ ": If an experiment works, something has gone wrong." }
puts white{ bold{ "Finagle's Second Law" } } + white{ ": No matter what the anticipated result, there will always be someone eager to (a) misinterpret it, (b) fake it, or (c) believe it happened according to his own pet theory." }
puts white{ bold{ "Finagle's Third Law" } } + white{ ": In any collection of data, the figure most obviously correct, beyond all need of checking, is the mistake." }
puts white{ bold{ "Finagle's Fourth Law" } } + white{ ": Once a job is fouled up, anything done to improve it only makes it worse." }

# fresco's discovery
puts white{ bold{ "Fresco's Discovery" } } + white{ ": If you knew what you were doing you'd probably be bored." }

# geer's law
puts white{ bold{ "Geer's Law" } } + white{ ": Any security technology whose effectiveness can't be empirically determined is indistinguishable from blind luck." }

# glib's fourth law
puts white{ bold{ "Glib's Fourth Law of Unreliability" } } + white{ ": Investment in reliability will increase until it exceeds the probable cost of errors, or until someone insists on getting some useful work done." }

# goodhart's law and corollary
#  (see https://en.wikipedia.org/wiki/Goodhart%27s_law)
puts white{ bold{ "Goodhart's Law (Popular formulation)" } } + white{ ": When a measure becomes a target, it ceases to be a good measure." }
puts white{ bold{ "Goodhart's Law (Original formulation)" } } + white{ ": Any observed statistical regularity will tend to collapse once pressure is placed upon it for control purposes." } + black{ bold{ " - Charles Goodhart (1975)" } }
puts white{ bold{ "Goodhart's Law (Danielsson's corollary)" } } + white{ bold{ ": A risk model breaks down when used for regulatory purposes." } } + black{ bold{ " (2002)" } }

# hlade's law .. appears to be a misattribution with no source available
puts white{ bold{ "If you have a difficult task, give it to a lazy person" } } + white{ " - they will find an easier way to do it." } + black{ bold{ " - Walter Percy Chrysler (1875-1940), American industrialist" } }

# hoare's law
puts white{ bold{ "Hoare's Law of Large Problems" } } + white{ ": Inside every large problem is a small problem struggling to get out." }

# howe's law
puts white{ bold{ "Howe's Law" } } + white{ ": Everyone has a scheme that will not work." }

# kinkler
puts white{ bold{ "Kinkler's First Law" } } + white{ ": Responsibility always exceeds authority." }
puts white{ bold{ "Kinkler's Second Law" } } + white{ ": All the easy problems have been solved." }

# lampson's law
puts white{ bold{ "Lampson's Law" } } + white{ ": " } + white{ bold{ "Get it right." } } + white{ " Neither abstraction nor simplicity is a substitute for getting it right. In fact, abstraction can be a source of severe difficulties." } + black{ bold{ " - Butler W. Lampson (1983)" } }
# lampson's law - corollary of speed
puts white{ bold{ "Lampson's Law - Corollary of Speed" } } + white{ ": " } + white{ bold{ "Make it fast, rather than general or powerful." } } + white{ " If it's fast, the client can program the function it wants, and another client can program some other function. It is much better to have basic operations executed quickly than more powerful ones that are slower (of course, a fast, powerful operation is best, if you know how to get it). The trouble with slow, powerful operations is that the client who doesn’t want the power pays more for the basic function. Usually it turns out that the powerful operation is not the right one." } + black{ bold{ " - Butler W. Lampson (1983)" } }
# lampson's law - corollary of power
puts white{ bold{ "Lampson's Law - Corollary of Power" } } + white{ ": " } + white{ bold{ "Don't hide power." } } + white{ " When a low level of abstraction allows something to be done quickly, higher levels should not bury this power inside something more general. The purpose of abstractions is to conceal undesirable properties; desirable ones should not be hidden. Sometimes, of course, an abstraction is multiplexing a resource, and this necessarily has some cost. But it should be possible to deliver all or nearly all of it to a single client with only slight loss of performance." } + black{ bold{ " - Butler W. Lampson (1983)" } }
# lampson's law - corollary of arguments
puts white{ bold{ "Lampson's Law - Corollary of Arguments" } } + white{ ": " } + white{ bold{ "Use procedure arguments to provide flexibility in an interface." } } + white{ " They can be restricted or encoded in various ways if necessary for protection or portability. This technique can greatly simplify an interface, eliminating a jumble of parameters that amount to a small programming language. A simple example is an enumeration procedure that returns all the elements of a set satisfying some property. The cleanest interface allows the client to pass a filter procedure that tests for the property, rather than defining a special language of patterns or whatever." } + black{ bold{ " - Butler W. Lampson (1983)" } }
# lampson's law - corollary of the client
puts white{ bold{ "Lampson's Law - Corollary of the Client" } } + white{ ": " } + white{ bold{ "Leave it to the client." } } + white{ " As long as it is cheap to pass control back and forth, an interface can combine simplicity, flexibility and high performance by solving only one problem and leaving the rest to the client." } + black{ bold{ " - Butler W. Lampson (1983)" } }

# lazlo
puts white{ bold{ "Lazlo's Chinese Relativity Axiom" } } + white{ ": No matter how great your triumphs or how tragic your defeats - approximately one billion Chinese couldn't care less." }

# maier's law
puts white{ bold{ "Maier's Law" } } + white{ ": If the facts do not conform to the theory, they must be disposed of." }

# meskimen's law
puts white{ bold{ "Meskimen's Law" } } + white{ ": There's never time to do it right, but there's always time to do it over." }

# miller's law
puts white{ bold{ "Miller's Law" } } + white{ ": All discussions of incremental updates will eventually trend towards proposals for large scale redesigns, feature additions or replacements." } + black{ bold{ " - Mike Beltzner (after Dave Miller of Bugzilla)" } }

# moravec's paradox
puts white{ bold{ "Moravec's Paradox" } } + white{ ": Contrary to traditional assumptions, high-level reasoning requires very little computation, but low-level sensorimotor skills require enormous computational resources." } + black{ bold{ " - Hans Moravec, Rodney Brooks, Marvin Minsky et al. (1980s)" } }

# mosher's law
puts white{ bold{ "Mosher's Law of Software Engineering" } } + white{ ": Don't worry if it doesn't work right. If everything did, you'd be out of a job." }

# ogden's law
puts white{ bold{ "Ogden's Law" } } + white{ ": The sooner you fall behind, the more time you have to catch up." }

# carlson's conundrum
puts white{ bold{ "Carlson's Conundrum" } } + white{ ": The sooner you start to code, the longer the program will take." }

# parkinson's law
puts white{ bold{ "Parkinson's Law" } } + white{ ": Work expands so as to fill the time available for its completion." } + 
black{ bold{ " - Cyril Northcote Parkinson, British civil servant, first published in 'The Economist' (1955)" } }
puts white{ bold{ "Parkinson's Law - Stock-Sanford Corollary" } } + white{ ": If you wait until the last minute, it only takes a minute to do." }
puts white{ bold{ "Parkinson's Law - Data Corollary" } } + white{ ": Data expands to fill the space available for storage." }
puts white{ bold{ "Generalized form of Parkinson's Law" } } + white{ ": The demand upon a resource tends to expand to match the supply of the resource. The reverse is not true." }
puts white{ bold{ "Principle of Comitology" } } + white{ ": Committees, government cabinets, and other such bodies are created and eventually grow irrelevant (or are initially designed as such)." } + black{ bold{ " - Cyril Northcote Parkinson, British civil servant" } }
puts white{ bold{ "Parkinson's Conjecture" } } + white{ ": Committees with a membership exceeding a number between 19.9 and 22.4 are ineffective." } + black{ bold{ " - Cyril Northcote Parkinson, British civil servant" } }

# peter's law
puts white{ bold{ "Peter's Law of Substitution" } } + white{ ": Look after the molehills, and the mountains will look after themselves." }

# planck's principle
puts white{ bold{ "Planck's Principle of Increasing Effort" } } + white{ ": With every advance [in science] the difficulty of the task is increased." }

# roman rule
puts white{ bold{ "Roman Rule" } } + white{ ": The one who says it cannot be done should never interrupt the one who is doing it." }

# rostow's reflection
puts white{ bold{ "Rostow's Reflection" } } + white{ ": Marginal productivity first rises and then declines in individual fields." } + black{ bold{ " - Walter Rostow (1980)" } }

# shamir's three laws of security
puts white{ bold{ "Shamir's First Law of Security" } } + white{ ": Absolutely secure systems do not exist." }
puts white{ bold{ "Shamir's Second Law of Security" } } + white{ ": To halve your vulnerability, you have to double your expenditure." }
puts white{ bold{ "Shamir's Third Law of Security" } } + white{ ": Cryptography is typically bypassed, not penetrated." }

# stigler's law
puts white{ bold{ "Stigler's Law of Eponymy" } } + white{ ": No scientific discovery is named after its original discoverer." } + black{ bold{ " - Stephen Sigler, statistician (but attributed to Robert K. Merton, sociologist)" } }

# sturgeon's law
puts white{ bold{ "Sturgeon's Law" } } + white{ ": ninety percent of everything is crap." } + black{ bold{ " - Theodore Sturgeon, an science fiction author" } }

# tainter's law (paraphrased from 1996 paper @ http://dieoff.org/page134.htm)
puts white{ bold{ "Tainter's Law of Social Complexity" } } + white{ ": Social structures generate negative returns when they become too complex." }
puts white{ bold{ "Tainter's Law of Human Behavior" } } + white{ ": Many aspects of human behavior appear to be complexity averse." } # 1995
puts white{ bold{ "Tainter's Law of Diminishing Returns" } } + white{ ": Diminishing returns make complexity less attractive and breed disaffection." }
puts white{ bold{ "Tainter's Law of Problem Solving" } } + white{ ": As easier solutions are exhausted, problem solving moves inexorably to greater complexity, higher costs, and diminishing returns." }

# tesler's law
puts white{ bold{ "Tesler's Law of Conservation of Complexity" } } + white{ ": Every application has an inherent amount of irreducible complexity. The only question is who will have to deal with it - the user, the application developer, or the platform developer?" } + black{ bold{ " - Larry Tesler (ca. 1984)" } }

# wirth's law (and disabled restatements)
puts white{ bold{ "Wirth's Law" } } + white{ ": Software gets slower faster than hardware gets faster." } + black{ bold{ " - Niklaus Wirth (1995)" } }
#puts white{ bold{ "May's Law" } } + white{ ": Software efficiency halves every 18 months, compensating Moore's Law." } + black{ bold{ " - Restatement of Wirth's Law after David May." } }
#puts white{ bold{ "The speed of software halves every 18 months." } } + black{ bold{ " - Restatement of Wirth's Law after Bill Gates, founder of Microsoft." } }
# hofstader's law
puts white{ bold{ "Hofstadter's Law" } } + white{ ": It always takes longer than you expect, even when you take into account Hofstadter's Law." } + black{ bold{ " - Douglas Hofstadter, 'Gödel, Escher, Bach: An Eternal Golden Braid' (1979)" } }

# zawinski
puts white{ bold{ "Zawinski's Law" } } + white{ ": Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can." }

# zymurgy
puts white{ bold{ "Zymurgy's First Law of Evolving Systems Dynamics" } } + white{ ": Once you open a can of worms, the only way to recan them is to use a larger can." }

# alan kay
puts "----- Alan Kay -----"
puts white{ bold{ "I like developed arts of all kinds, and these require learning on the part of the beholder" } } + white{ ", not just bones tossed at puppies." } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ "Children need to learn how to use the 21st century" } } + white{ ", or there's a good chance they will lose the 21st century." } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ "Television is the last technology we should be allowed to invent without a Surgeon General's warning on it." } } + black{ bold{ " - Alan Kay" } }
puts white{ bold{ 'It used to be the case that people were admonished to "not re-invent the wheel". We now live in an age that spends a lot of time "reinventing the flat tire!"' } } + white{ ' The flat tires come from the reinventors often not being in the same league as the original inventors. This is a symptom of a "pop culture" where identity and participation are much more important than progress...' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'In the US ' } + white{ bold{ 'we are now embedded in a pop culture that has progressed far enough to seriously hurt places that hold "developed cultures". This pervasiveness makes it hard to see anything else' } } + white{ ', and certainly makes it difficult for those who care what others think to put much value on anything but pop culture norms.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'If you start with "desirable process" you can eventually work your way back to the power plug in the wall. If you start with something already plugged in, you might miss a lot of truly desirable processes.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'Better and Perfect are the enemies of What-Is-Actually-Needed' } } + black{ bold{ ':' } } + white{ ' The big sin so many people commit in computing is not really paying attention to "What-Is-Actually-Needed"! And not going below that. People are tempted to choose an increment, and will say "at least it\'s a little better" - but if the threshold isn\'t actually reached, then it is the opposite of a little better, it\'s an illusion.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'I found getting halfway decent funding since 1980 to be quite a chore.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'What is going on now is partly a retreat from real literacy back to oral modes of communication and oral modes of thought (i.e. "texting" is really a transliteration of an oral utterance, not a literary form).' } + white{ bold{ ' This is a disaster.' } } + black{ bold{ ' - Alan Kay (2016)' } }
puts white{ "With a good programming language and interface, one - even children - can create from scratch important simulations of complex non-linear systems that can help one's thinking about them." } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ "What programming language design would help us think a lot better than we do now?" } + white{ bold{ " (We are currently terrible!)" } } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ "You could 'hot-edit' Lisp (1.85 at BBN) in the 60s (and there were other such systems). Smalltalk at Parc in the 70s used many of these ideas, and went even further." } + white{ bold{ " Development environments should help programmers think" } } + white{ " (but what if most programmers don't want to think?)" } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'When the first Turing Award winner - Al Perlis - was asked in the 60s "What is Computer Science?", he said "It is the science of processes!". He meant all processes including those on computers, but also in Biology, society, etc. His idea was that computing formed a wonderful facility for making better models of pretty much everything, especially dynamic things (which everything actually is), and that it was also the kind of thing that could really be understood much better by using it to make models of itself. Today, we could still take this as a starting place for "getting \'Computer Science\' back from where it was banished".' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ "All languages today annoy me" } } + white{ " - just put me down as a grump. They seem to be at a very weak level of discourse for the 21st century. (But a few are fun when looked at from the perspectives of the past e.g. Erlang ...)" } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'Are "the good goals of the past" good enough goals for today and tomorrow?' } } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ "Seymour Cray was a man of few words." } } + white{ " I was there for three weeks before I realized he was not the janitor." } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ "We were lucky in the ARPA/PARC communities to have both great funding, and the time to think things through" } } + white{ " (and even make mistakes that were kept from propagating to create bad defacto standards)." } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'The question you are asking is really a societal one - and about operations that are like strip mining and waste dumping. ' } + white{ bold{ '"Hunters and gatherers" (our genetic heritage) find fertile valleys, strip them dry and move on (this only works on a very small scale). "Civilization" is partly about learning how to overcome our dangerous atavistic tendencies through education and planning.' } } + white{ ' It\'s what we should be about generally (and the CS part of it is just a symptom of a much larger much more dire situation we are in).' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ ' One of several major mistakes with the web has to do with thinking that the browser is some kind of application "with features"' } } + white{ ' - if you think of the actual scale of the Internet (and they didn\'t) you realize that at the very least, the browser, etc, has to be more like an operating system, and with as few features as possible: really to safely run encapsulated modules and deal out resources. It is crazy that after more than 20 years of the web that this CS101 principle still can\'t be done ... and it runs on machines that can do it....' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ '"What Fools these Mortals be!" Puck meant that we are easy to fool. In fact we like to be fooled - ' } + white{ bold{ 'we pay lots of money to be fooled!' } } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'I do get depressed - how could one not? - the trick with depression is to not allow it to take you into in-action.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'What is "data" without an interpreter (and when we send "data" somewhere, how can we send it so its meaning is preserved?)' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ 'There are lots of "old and fundamental" ideas that are not good anymore, if they ever were.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ '"The objects of the future" have to be ambassadors that can negotiate with other objects they\'ve never seen.' } } + white{ ' Think about this as one of the consequences of massive scaling ...' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ "Advice to CS students" } } + black{ bold{ ':' } } + white{ ' Learn a lot of other things, and at least one real science and one real engineering. This will help to calibrate the somewhat odd lore aka "computing knowledge". I would certainly urge a number of anthropology courses (and social psychology, etc), theater, and so forth. In the right school, I\'d suggest "media theory" (of the "Mcluhan", "Innis", "Postman" kind ...)' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ "There's coming up with ideas: learn to dream while you are awake, the ideas are there. There's coming up with a good idea: learn how to not get buried in your ideas (most are mediocre down to bad even for people who have \"good idea skills\"!) I write down ideas in notebooks to get rid of them. Every once in a while one will capture a different point of view. And, there's the Princeton Tea joke of scientists comparing what they did for ideas. One says \"I have them in the middle of the night so I have a pad by my bed\". Another says \"I have them in the shower so I have a grease pencil to write them on the walls\". Einstein was listening and they asked him about his ideas. He said \"I don't know, I've only had two!\" (Some people are better at filtering than others ...)" } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'Most of my ideas come in "waking dreams"' } } + white{ ' (this is a state that most children indulge in readily, but it can be retained in a more or less useful way - I don\'t think you quite get into adulthood by retaining it, so it\'s a tradeoff). Main thing about ideas is that, however they come, most of them are mediocre down to bad - so steps have to be taken to deal with this major problem.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ '10 years is too close' } } + white{ ' - 30 years out will generally lose the pernicious connection to the present and "how do we get there?". The idea is to "go out there and bring the ideas back" rather than try to go from the present to the future.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'Our most unrealistic assumption was that when presented with really good ideas most people will most definitely learn and use them to make progress.' } } + white{ ' In reality, only a tiny percentage can do this, and it is an enormous amount of work to deal with the norms.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'The problems with most arguments is that they arguers assume they are in a valid context' } } + white{ ' (this is usually not the case, and this is the central problem of "being rational"). Another way to look at it is "Forget about trying to win an argument - use argumentation to try to understand the issues better and from more perspectives ..."' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'A good heuristic for designing programming languages' } } + white{ ' is to try to take the largest most complicated kinds of things you want to do, work them out, and then see if there is a "language lurking". Most people make the big mistake of lovingly making small neat examples that are easy to learn - these often don\'t scale at all well. E.g. "data" in the small "seems natural" but the whole idea scales terribly. And so forth for most of the favorite paradigms around today.' } + black{ bold{ " - Alan Kay (2016)" } }
puts white{ bold{ 'Try to avoid "growing old"!' } } + white{ ' A big problem with the general industry is the lack of subsidized "sabbatical years" - these are a good way to recharge and re-orient. Xerox, amazingly, used to have them for employees. But I haven\'t heard of any such thing recently. If you think about life as needing "renewables" then ' } + white{ bold{ 'you shouldn\'t allow yourself to be "stripmined"' } } + white{ ' (easier said than done).' } + black{ bold{ " - Alan Kay (2016)" } }

# arthur c. clarke
puts "----- Arthur C. Clarke -----"
puts white{ bold{ "Clarke's First Law" } } + white{ ": When a distinguished but elderly scientist states that something is possible, he is almost certainly right. When he states that something is impossible, he is very probably wrong." } + black{ bold{ " - Arthur C. Clarke" } }
puts white{ bold{ "Clarke's First Law - AI Corollary" } } + white{ ": Any sufficiently advanced benevolence may be indistinguishable from malevolence." }
puts white{ bold{ "Grey's Law (corollary to Clarke's First Law)" } } + white{ ": Any sufficiently advanced incompetence is indistinguishable from malice." }
puts white{ bold{ "Poe's Law (crollary to Clarke's First Law)" } } + white{ ": Any sufficiently advanced troll is indistinguishable from a genuine kook." }
puts white{ bold{ "Clarke's Second Law" } } + white{ ": The only way of discovering the limits of the possible is to venture a little way past them into the impossible." } + black{ bold{ " - Arthur C. Clarke" } }
puts white{ bold{ "Clarke's Third law" } } + white{ ": Any sufficiently advanced technology is indistinguishable from magic." } + black{ bold{ " - Arthur C. Clarke" } }

# sagan
puts "----- Carl Sagan -----"
puts white{ "If I finish a book a week, I will read only a few thousand books in my lifetime, about a tenth of a percent of the contents of the greatest libraries of our time." } + white{ bold{ " The trick is to know which books to read." } } + black{ bold{ " - Carl Sagan, 'Cosmos' (1980)" } }

# kranzberg
puts "----- Melvin Kranzberg -----"
puts white{ bold{ "Kranzberg's 1st Law of Technology" } } + white{ ": Technology is neither good nor bad; nor is it neutral." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
# removed ... this law is previously attributable to earl wiener (1980) as wiener's fourth law
#puts white{ bold{ "Kranzberg's 2nd Law of Technology" } } + white{ ": Invention is the mother of necessity." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 3rd Law of Technology" } } + white{ ": Technology comes in packages, big and small." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 4th Law of Technology" } } + white{ ": Although technology might be a prime element in many public issues, nontechnical factors take precedence in technology-policy decisions." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 5th Law of Technology" } } + white{ ": All history is relevant, but the history of technology is the most relevant." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }
puts white{ bold{ "Kranzberg's 6th Law of Technology" } } + white{ ": Technology is a very human activity - and so is the history of technology." } + black{ bold{ " - Melvin Kranzberg, 'Technology and Culture', Vol. 27, No. 3 (1986)" } }

# larry niven
puts "----- Larry Niven ------"
puts white{ bold{ "Niven's First Law" } } + white{ ": Never fire a laser at a mirror." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Second Law" } } + white{ ": Giving up freedom for security is beginning to look naïve." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Third Law" } } + white{ ": It is easier to destroy than to create." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Fourth Law" } } + white{ ": Ethics change with technology." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Fifth Law" } } + white{ ": The only universal message in science fiction: There exist minds that think as well as you do, but differently." } + black{ bold{ " - Larry Niven, science fiction author" } }
puts white{ bold{ "Niven's Law of Time Travel" } } + white{ ": If the universe of discourse permits the possibility of time travel and of changing the past, then no time machine will be invented in that universe." }

puts white{ bold{ "Niven's First Law of Writing" } } + white{ ": Writers who write for other writers should write letters." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Second Law of Writing" } } + white{ ": Never be embarrassed or ashamed about anything you choose to write. (Think of this before you send it to a market.)" } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Third Law of Writing" } } + white{ ": Stories to end all stories on a given topic, don't." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Fourth Law of Writing" } } + white{ ": It is a sin to waste the reader's time." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Fifth Law of Writing" } } + white{ ": If you've nothing to say, say it any way you like. Stylistic innovations, contorted story lines or none, exotic or genderless pronouns, internal inconsistencies, the recipe for preparing your lover as a cannibal banquet: feel free. If what you have to say is important and/or difficult to follow, use the simplest language possible. If the reader doesn't get it then, let it not be your fault." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }
puts white{ bold{ "Niven's Sixth Law of Writing" } } + white{ ": Everybody talks first draft." } + black{ bold{ " - Larry Niven, science fiction author (1989)" } }

puts "----- richard stallman -----"
puts white{ "With software, " } + white{ bold{ "either the users control the program, or the program controls the users." } } + black{ bold{ " - Richard Stallman" } }
puts white{ bold{ "Americans have shown that they are politically naïve." } } + white{ " If you look at how successful plutocratic candidates are in the U.S. - you can get Americans to vote to give their money to the rich. You have to just say certain predictable, silly things to them, and most of them will be fooled." } + black{ bold{ " - Richard Stallman" } }
puts white{ "Even though it’s sad to see people being foolish, there's no use giving up." } + white{ bold{ " Nothing good can come of giving up. That just means you lose completely, right away." } } + black{ bold{ " - Richard Stallman" } }

puts "----- randoms on distribution -----"
# 90/90 aka. 'Rule of Credibility'
puts white{ bold{ "90:90 Rule (Rule of Credibility)" } } + white{ ": The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time." } + black{ bold{ " - Tom Cargill, Bell Labs" } }

# 80/20 aka. 'Pareto Principle'
puts white{ bold{ "80:20 Rule (Pareto Principle)" } } + white{ ": 80% of the state of the system derives from 20% of the causes." } + black{ bold{ " - Italian economist Vilfredo Pareto (1906)" } }
puts white{ bold{ "80:20 Rule (Pareto Principle) - Bug Fixing Corollary" } } + white{ ": Fixing 20% of the bugs resolves 80% of the issues." } + black{ bold{ " - Microsoft" } }
puts white{ bold{ "Law of the Vital Few" } } + white{ ": 20% of people do 80% of the work." } + black{ bold{ " - Anonymous" } }
puts white{ bold{ "20 percent of the code has 80 percent of the errors." } } + white{ " Find them, fix them!" } + black{ bold{ " - Lowell Arthur" } }

# law of probability dispersal
puts white{ bold{ "Law of Probability Dispersal" } } + white{ ": Whatever it is that hits the fan will not be evenly distributed." }

# bystander effect
puts white{ bold{ "Bystander Effect" } } + white{ ": a social psychological phenomenon in which individuals do not offer any means of help to a victim when other people are present, and the probability of help is inversely related to the number of bystanders. In other words, the greater the number of bystanders, the less likely it is that any one of them will help." } + black{ bold{ " - Wikipedia" } }

puts white{ "Less than 10 percent of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other hosuekeeping." } + black{ bold{ " - Mary Shaw, Carnegie-Mellon University" } }

# randoms - change
puts "------ randoms on change ------"
puts white{ bold{ "A rolling stone gathers no moss." } } + black{ bold{ " - Condensed form of Publilius Syrus' (first century BCE) observation that people who are always moving, with no roots in one place, avoid responsibilities and cares. Another interpretation equates 'moss' to 'stagnation'; stagnant people lack fresh ideas and creativity." } }
puts white{ bold{ "Precautionary Principle" } } + white{ ": If an action or policy has a suspected risk, in the absence of consensus, the burden of proof that it is not harmful falls upon those taking the action." }
puts white{ bold{ "Peter Principle" } } + white{ ": People will tend to be promoted until they reach their 'position of incompetence'." } + black{ bold{ " - After Laurence J. Peter, Raymond Hull's co-author of 'The Peter Princple: Why Things Always Go Wrong' (1975)" } }
puts white{ bold{ "No battle was ever won according to plan," } } + white{ " but no battle was ever won without one." } + black{ bold{ " - Dwight D. Eisenhower" } }
puts white{ "Don't keep doing what doesn't work." }
puts white{ "Good judgement comes from experience, and experience comes from bad judgement." } + black{ bold{ " - Fred Books, University of North Carolina" } }
puts white{ "I think " } + white{ bold{ "I've had milk last longer than some JavaScript frameworks" } } + white{ "." } + black{ bold{ ' - @iamdevloper (2014)' } }
puts white{ "Technological progress was much faster than political progress." } + black{ bold{ " - Joseph Henry Condon, Bell Labs" } }
puts white{ "Those change-over things are really severe. Really severe problems." } + black{ bold{ " - Joseph Henry Condon, Bell Labs" } } 
puts white{ bold{ "Perhaps we have overrated roots as a psychic need. " } } + white{ "Maybe the greater urge, the deeper and more ancient is the need, the will, the hunger to be somewhere else." } + black{ bold{ " - John Steinbeck" } }
puts white{ "Wisdom is the accumulation of knowledge and experience, living long enough to reflect on it, make sense of it, and apply it to oneself and others." } + black{ bold{ " - Abraham Maslow" } }
puts white{ bold{ "A third of people are really enthusiastic, a third have big eyes, and the other third think we are crazy." } } + white{ " That's how it goes with innovations." } + black{ bold{ " - Carel De Vries" } }
puts white{ "We somehow have to start trying to act as if there is going to be a future." } + black{ bold{ " - Brian Eno" } }
puts white{ bold{ "Technology does not drive change." } } + white{ " It is our collective response to the options and opportunities presented by technology that drives change." } + black{ bold{ " - Paul Saffo, Stanford Professor" } }
puts white{ "This 'telephone' has too many shortcomings to be seriously considered as a practical form of communication. The device is inherently of no value to us. What use could this company make of an electrical toy?" } + black{ bold{ " - Western Union (1878)" } }
puts white{ "Radio has no future." } + black{ bold{ " - Lord Kelvin, British mathematician and physicist (~1897)" } }
puts white{ "Heavier-than-air flying machines are impossible." } + black{ bold{ " - Lord Kelvin, British mathematician and physicist (~1895)" } }
puts white{ "What can be more palpably absurd than the prospect held out of locomotives traveling twice as fast as stagecoaches?" } + black{ bold{ " - The Quarterly Review, England (March 1825)" } }
puts white{ bold{ "There is not the slightest indication that [nuclear energy] will ever be obtainable." } } + white{ " It would mean that the atom would have to be shattered at will." } + black{ bold{ " - Albert Einstein (1932)" } }
puts white{ "Airplanes are interesting toys but of no military value." } + black{ bold{ " - Marshal Ferdinand Foch, French military strategist (1911)" } }
puts white{ "Space travel is utter bilge." } + black{ bold{ " - Dr. Richard van der Reit Wooley, Astronomer Royal, space advisor to the British government, 1956. (Sputnik orbited the earth the following year.)" } }
puts white{ "If the world should blow itself up, the last audible voice would be that of an expert saying it can't be done." } + black{ bold{ " - Peter Ustinov" } }
puts white{ "It is difficult to say what is impossible, for the dream of yesterday is the hope of today and the reality of tomorrow." } + black{ bold{ " - Robert Goddard (1882-1945)" } }
puts white{ "As I like to say to my American hedge fund friends, " } + white{ bold{ "the Hamptons is not a defensible position." } } + black{ bold{ " - Mark Blyth (professor of Political Economy at Brown University), on the rise in popular rejection of traditional politics (2016)" } }
puts white{ "Chaos is order yet undeciphered." } + black{ bold{ " - 'The Double', José Saramago (2002)" } }
puts white{ "The isms go, the ist dies, " } + white{ bold{ "art remains" } } + white{ "." } + black{ bold{ " - Vladimir Nabokov" } }
puts white{ bold{ "Man the food-gatherer reappears incongruously as information-gatherer." } } + white{ " In this role, electronic man is no less a nomad than his Paleolithic ancestors." } + black{ bold{ " - Marshall McLuhan (1967)" } }
puts white{ bold{ "It is hard to picture the world before Shannon as it seemed to those who lived in it." } } + white{ " It is difficult to recover innocence, ignorance, and lack of understanding." } + black{ bold{ " - John Robinson Pierce, on the world before Claude Shannon and the information age" } }
puts white{ bold{ "The invention of printing, though ingenious, compared with the invention of letters is no great matter." } } + black{ bold{ " - Thomas Hobbes, resisting new media hype in the 17th century" } }
puts white{ bold{ "Each new technology turns its predecessor into an art form." } } + black{ bold{ " - Marshall McLuhan" } }
puts white{ "With the PC, I could see that " } + white{ bold{ "computers were fun" } } + white{ ", and that is " } + white{ bold{ "the real reason why all innovations come into widespread use" } } + white{ "." } + black{ bold{ " - Leo Beranek, President of BBN, acoustics designer and internet pioneer" } }
puts white{ "The most amazing achievement of the computer software industry is its continuing cancellation of the steady and staggering gains made by the computer hardware industry." } + black{ bold{ " - Henry Petroski" } }
puts white{ "In 1299, zero was banned in Florence" } + black{ bold{ " [...] " } } + white{ "Incredibly " } + white{ bold{ "it wasn't until the 15th Century that zero, along with all the other Arabic numbers, was finally accepted" } } + white{ ". Just to put it in context, by then Oxford University in England had been around for centuries and the printing press was just up and running." } + black{ bold{ " - Hannah Fry, BBC future" } }
puts white{ "I am less concerned with Terminator scenarios." } + white{ bold { " If current trends continue, people are going to rise up well before the machines do." } } + black{ bold{ " - Andrew McAfee, MIT economist on AI (2017)" } }
puts white{ bold{ "To make error is human." } } + white{ " To propagate error to all server in automatic way is #devops." } + black{ bold{ " - @devopsborat" } }
puts white{ "In #devops is turtle all way down but at bottom is perl script." } + black{ bold{ " - @devopsborat" } }
puts white{ bold{ "There are two kinds of idiots" } } + black{ bold{ ":" } } + white{ ' the idiot who says "this is new, so it must be better" and the idiot who says "this is old, so it must be better". I try not to be either kind.' } + black{ bold{ " - @dsr_" } }
puts white{ "The last 20 years of Internet policy have been dominated by the copyright war, but the war turns out only to have been a skirmish. " } + white{ bold{ "The coming century will be dominated by war against the general purpose computer, and the stakes are the freedom, fortune and privacy of the entire human race." } } + black{ bold{ " - Cory Doctorow, at 28C3 (2011)" } }
puts white{ bold{ "Keep basic interfaces stable." } } + white{ " Since an interface embodies assumptions that are shared by more than one part of a system, and sometimes by a great many parts, it is very desirable not to change the interface." } + black{ bold{ " - Butler W. Lampson (1983)" } }
puts white{ bold{ "Keep a place to stand if you do have to change interfaces." } } + white{ " One is the compatibility package, which implements an old interface on top of a new system. This allows programs that depend on the old interface to continue working. Many new operating systems have kept old software usable by simulating the supervisor calls of an old system. Usually these simulators need only a small amount of effort compared to the cost of reimplementing the old software, and it is not hard to get acceptable performance. At a different level, the IBM 360/370 systems provided emulation of the instruction sets of older machines like the 1401 and 7090. Taken a little further, this leads to virtual machines, which simulate (several copies of) a machine on the machine itself." } + black{ bold{ " - Butler W. Lampson (1983)" } }

# randoms - optimization / efficiency
puts "------ randoms on optimization/efficiency ------"
#  snackwell is basically a domain-specific jevons in its original statement, therefore instead of a reasonable 
#  restatement, we leave snackwell out in favour of jevons
#puts white{ bold{ "Snackwell Effect" } } + white{ " (restatement of): Those seeking efficiency through optimization will consume with an increased frequency that partly negates the original gain." }
puts white{ bold{ "Jevons Paradox" } } + white{ ": As technology progresses, the increase in efficiency with which a resource is used tends to increase (rather than decrease) the rate of consumption of that resource." }
puts white{ bold{ "The First Rule of Program Optimization" } } + white{ ": Don't do it." } + black{ bold{ " - Michael Jackson" } }
puts white{ bold{ "The Second Rule of Program Optimization" } } + white{ " (for experts only): Don't do it yet." } + black{ bold{ " - Michael Jackson" } }
puts white{ "The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand." } + black{ bold{ " - Douglas W. Jones" } }
puts white{ "In non I/O-bound programs, a few percent of the source code typically accounts for over half the run time." } + black{ bold{ " - Don Knuth" } }
puts white{ "Before optimizing, using a profiler." } + black{ bold{ " - Mike Morton" } }
puts white{ "To speed up an I/O-bound program, begin by accounting for all I/O. Eliminate that which is unnecessary or redundant, and make the remaining as fast as possible." } + black{ bold{ " - David Martin" } }
puts white{ "The fastest I/O is no I/O." } + black{ bold{ " - Nils-Peter Nelson" } }
puts white{ "The cheapest, fastest and most reliable components of a system are those that aren't there." } + black{ bold{ " - Gordon Bell" } }
puts white{ "Whenever possible, steal code." } + black{ bold{ " - Tom Duff, Bell Labs" } }
puts white{ "Translating a working program to a new language or system takes 10 percent of the original development time or manpower or cost." } + black{ bold{ " - Douglas W. Jones, University of Iowa" } }
puts white{ "Don't use the computer to do things that can be done efficiently by hand." } + black{ bold{ " - Richard Hill, Hewlett-Packard" } }
puts white{ "Don't use hands to do things that can be done efficiently by the computer." } + black{ bold{ " - Tom Duff, Bell Labs" } }
puts white{ "I'd rather write programs to write programs than write programs." } + black{ bold{ " - Dick Sites, Digital Equipment Corporation" } }
puts white{ bold{ "Brooks' Law of Prototypes" } } + white{ ": Plan to throw one away, you will anyhow." } + black{ bold{ " - Fred Brooks, University of North Carolina" } }
puts white{ bold{ "Brooks' Law of Prototypes (Zerouni's Carollary)" } } + white{ ": If you plan to throw one away, you will throw away two." } + black{ bold{ " - Craig Zerouni" } }
puts white{ "Prototyping cuts the work to produce a system by 40 percent." } + black{ bold{ " - Larry Bernstein, Bell Communications Research" } }
puts white{ "Furious activity is no substitute for understanding." } + black{ bold{ " - H. H. Williams" } }
puts white{ "Make it work first before you make it work fast." } + black{ bold{ " - Bruce Whiteside" } }
puts white{ "Make it right before you make it faster." } + black{ bold{ " - Jon Bentley" } }
puts white{ "Omit needless words." } + black{ bold{ " - Strunk and White, 'The Elements of Style' (1919)" } }
puts white{ bold{ "Spell create with an \'e\'." } } + black{ bold{ " - Ken Thompson (referring to design regrets on the UNIX creat(2) system call and the fallacy of premature optimization)" } } 
puts white{ "Keep it simple to make it faster." } + black{ bold{ " - Kernighan and Plauger, 'Elements of Programming Style'" } }
puts white{ "Do not take shortcuts at the cost of clarity." }
puts white{ "Thomas Edison was already famous for his telegraph technology and his huge hit with the record player. He had made a public show of turning the full focus of his massive laboratory to the question of electric light. A couple of years into the effort a reporter was visiting his lab and asked how close Edison was to coming up with a viable light bulb. Edison replied " } + white{ bold{ "\"We are on bulb number 732!\"" } } 
puts white{ bold{ "The No Free Lunch theorem" } } + black{ bold{ ": " } } + white{ "Any two optimization algorithms are equivalent when their performance is averaged across all possible problems " } + black{ bold{ "(if an algorithm performs well on a certain class of problems then it necessarily pays for that with degraded performance on the set of all remaining problems)." } }

# steven levy
puts '--- Steven Levy ---'
puts white{ bold{ 'Access to computers - and anything which might teach you something about the way the world works - should be unlimited and total.' } } + white{ ' Always yield to the Hands-On Imperative!' } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'All information should be free.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'Mistrust authority - promote decentralization.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'Hackers should be judged by their hacking' } } + white{ ', not criteria such as degrees, age, race, sex, or position.' } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'You can create art and beauty on a computer.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }
puts white{ bold{ 'Computers can change your life for the better.' } } + black{ bold{ ' - Steven Levy, Hackers: Heroes of the Computer Revolution (1984)' } }

# rob pike
puts '--- Rob Pike ---'
puts white{ "Pike's 1st Rule" } + white{ bold{ ": You can't tell where a program is going to spend its time." } } + white{ " Bottlenecks occur in surprising places, so don't try to second guess and put in a speed hack until you've proven that's where the bottleneck is." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 2nd Rule" } + white{ bold{ ": Measure." } } + white{ " Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 3rd Rule" } + white{ bold{ ": Fancy algorithms are slow when " } } + white{ "n" } + white{ bold{ " is small, and " } } + white{ 'n' } + white{ bold{ " is usually small." } } + white{ " Fancy algorithms have big constants. Until you know that n is frequently going to be big, don't get fancy." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 4th Rule" } + white{ bold{ ": Fancy algorithms are buggier than simple ones, and they're much harder to implement." } } + white{ " Use simple algorithms as well as simple data structures." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }
puts white{ "Pike's 5th Rule" } + white{ bold{ ": Data dominates." } } + white{ " If you've chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming." } + black{ bold{ ' - Rob Pike, Notes on C Programming (1989)' } }

# marvin minsky (MIT AI lab)
puts '--- marvin minsky ---'
puts white{ "In general, " } + white{ bold{ "we're least aware of what our minds do best." } } + black{ bold{ ' - Marvin Minsky, MIT AI lab co-founder' } }
puts white{ bold{ "We're more aware of simple processes that don't work well than of complex ones that work flawlessly." } } + black{ bold{ ' - Marvin Minsky, MIT AI lab co-founder' } }

# hackers of history
puts '--- Hackers of History ---'
puts white{ 'The libertinistic rake is ' } + white{ bold{ 'anti-authoritarian' } } + white{ ',' } + white{ bold{ ' anti-normative' } } + white{ ', and ' } + white{ bold{ 'anti-traditional' } } + white{ '.' } + black{ bold{ ' - Wikipedia on 17th century \'Rake (character)\'' } }
puts white{ 'Knowledge will forever govern ignorance, and a people who mean to be their own governors must arm themselves with the power knowledge gives. ' } + white{ bold{ 'A popular government without popular information or the means of acquiring it is but a prologue to a farce or a tragedy' } } + white{ '... or perhaps both.' } + black{ bold{ ' - U.S. Founding Father James Madison' } }
puts white{ "There was a romantic tradition, in this country at least, of " } + white{ bold{ "the drifter Typesetters" } } + white{ ", who were good enough at the craft to find work wherever they traveled. They'd work in one town until they wanted a change and then drift on. They had a reputation for being well read, occasionally hard drinking, strong union men who enjoyed an independence particularly rare in the 19th century." } + black{ bold{ ' - Clark E. Coffee (founder of Graphion, a phototypesetting company in SF)' } }

# robert david steele
puts '--- Robert David Steele ---'
puts white{ 'We are at the end of a five-thousand-year-plus historical process during which ' } + white{ bold{ 'human society grew in scale while it abandoned the early indigenous wisdom councils and communal decision-making. Power was centralised in the hands of increasingly specialised \'elites\' and \'experts\' who not only failed to achieve all they promised but used secrecy and the control of information to deceive the public' } } + white{ ' into allowing them to retain power over community resources that they ultimately looted.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ bold{ 'The preconditions of revolution exist in the UK, and most western countries' } } + white{ '. The number of active pre-conditions is quite stunning, from elite isolation to concentrated wealth to inadequate socialisation and education, to concentrated land holdings to loss of authority to repression of new technologies especially in relation to energy, to the atrophy of the public sector and spread of corruption, to media dishonesty, to mass unemployment of young men and on and on and on. [...] Preconditions are not the same as precipitants. ' } + white{ bold{ 'We are waiting for our Tunisian fruit seller' } } + white{ '. The public will endure great repression, especially when most media outlets and schools are actively aiding the repressive meme of \'you are helpless, this is the order of things.\' When we have a scandal so powerful that it cannot be ignored by the average Briton or American, we will have a revolution that overturns the corrupt political systems in both countries, and perhaps puts many banks out of business. Vaclav Havel calls this ' } + white{ bold{ '\'The Power of the Powerless.\' One spark, one massive fire.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ 'The west has pursued an industrialisation path that allows for the ' } + white{ bold{ 'privatisation of wealth from the commons' } } + white{ ', along with ' } + white{ bold{ 'the criminalisation of commons rights' } } + white{ ' of the public, as well as ' } + white{ bold{ 'the externalisation of all true costs' } } + white{ '. Never mind that fracking produces earthquakes and poisons aquifers – corrupt politicians at local, state or province, and national levels are all too happy to take money for looking the other way. ' } + white{ bold{ 'Our entire commercial, diplomatic, and informational systems are now cancerous.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ 'When trade treaties have secret sections - or are entirely secret - one can be certain the public is being screwed and the secrecy is an attempt to avoid accountability.' } + white{ bold{ ' Secrecy enables corruption. So also does an inattentive public enable corruption.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'Predatory capitalism is based on the privatisation of profit and the externalisation of cost' } } + white{ '. It is an extension of the fencing of the commons, of enclosures, along with the criminalisation of prior common customs and rights. ' } + white{ bold{ 'What we need is a system that fully accounts for all costs' } } + white{ '. Whether we call that capitalism or not is irrelevant to me. But doing so would fundamentally transform the dynamic of present day capitalism, by making capital open source.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'We have over 5 billion human brains that are the one infinite resource available to us going forward' } } + white{ '. Crowd-sourcing and cognitive surplus are two terms of art for the ' } + white{ bold{ 'changing power dynamic between those at the top that are ignorant and corrupt, and those across the bottom that are attentive and ethical' } } + white{ '. The open source ecology is made up of a wide range of opens – open farm technology, open source software, open hardware, open networks, open money, open small business technology, open patents – to name just a few. The key point is that they must all develop together, otherwise the existing system will isolate them into ineffectiveness.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ 'I\'m not surprised. ' } + white{ bold{ 'Open source everything pretty much undermines everything the national security state stands for.' } } + black{ bold{ ' - Nafeez Ahmed, The Guardian, 2014-06-19, on ex-Marine, ex-CIA, Open Source Inteligence expert Robert David Steele\'s unanswered 2014-05-01 letter to US Vice President Joe Bidden urging the establishment of an Open Source Agency to cut costs and increase accountability.' } }
puts white{ 'The national security state is an expensive, ineffective monstrosity that is simply not fit for purpose. In that sense, ' } + white{ bold{ 'the national security state is it\'s own worst enemy – it\'s bound to fail.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19, summarizing his book \'On Intelligence: Spies and Secrecy in an Open World\', with a foreword by Senator David Boren, immediate past chairman of the Senate Select Committee for Intelligence' } }
puts white{ bold{ 'The National Security Agency (NSA) has not prevented any terrorist incidents. CIA cannot even get the population of Syria correct and provides no intelligence - decision-support - to most cabinet secretaries, assistant secretaries, and department heads' } } + white{ '. Indeed General Tony Zinni, when he was commander in chief of the US Central Command as it was at war, is on record as saying that he received, "at best," a meagre 4% of what he needed to know from secret sources and methods.' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The 1% are simply not as powerful as they, and we, assume them to be.' } } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19, as paraphrased by Nafeez Ahmed.' } }
puts white{ 'Open source everything is about the five billion poor coming together to reclaim their collective wealth and mobilise it to transform their lives. ' } + white{ bold{ 'There is zero chance of the revolution being put down' } } + white{ '. Public agency is emergent, and ' } + white{ bold{ 'the ability of the public to literally put any bank or corporation out of business overnight is looming' } } + white{ '. To paraphrase Abe Lincoln, you cannot screw all of the people all of the time. We\'re there. All we lack is a major precipitant – our Tunisian fruit seller. When it happens ' } + white{ bold{ 'the revolution will be deep and lasting.' } } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }
puts white{ bold{ 'Top down power has failed in a most spectacular manner, and bottom-up consensus power is emergent.' } } + white{ ' "Not in my neighborhood" is beginning to trump "Because I say so."' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The one unlimited resource we have on the planet is the human brain' } } + white{ ' – the current strategy of 1% capitalism is failing because it is killing the Golden Goose at multiple levels. Unfortunately, ' } + white{ bold{ 'the gap between those with money and power and those who actually know what they are talking about has grown catastrophic' } } + white{ '. The rich are surrounded by sycophants and pretenders whose continued employment demands that they not question the premises. As Larry Summers lectured Elizabeth Warren, \'insiders do not criticise insiders.\'' } + black{ bold{ ' - Robert David Steele, The Guardian, 2014-06-19' } }
puts white{ bold{ 'The national security state works for the City of London and Wall Street' } } + white{ ' – both are about to be toppled by a combination of Eastern alternative banking and alternative international development capabilities, and individuals who recognise that they have the power to pull their money out of the banks and not buy the consumer goods that subsidise corruption and the concentration of wealth. ' } + white{ bold{ 'The opportunity to take back the commons for the benefit of humanity as a whole is open – here and now.' } } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }
puts white{ 'My motto, a play on the CIA motto that is disgraced every day, is \'' } + white{ bold{ 'the truth at any cost lowers all other costs' } } + white{ '\'.' } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }
puts white{ 'Others wiser than I have pointed out that ' } + white{ bold{ 'nature bats last' } } + white{ '. We are at the end of an era in which lies can be used to steal from the public and the commons. We are at the beginning of an era in which truth in public service can restore us all to a state of grace.' } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert in The Guardian, 2014-06-19' } }
puts white{ 'Security can only be attained through pure transparency not secrecy. Intelligence can only be maximally effective if it is open and collective.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ 'Human beings, who had spent centuries evolving away from slavery, were re-commoditized by the Industrial Era.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ 'Secular corruption is made possible by information asymmetries between those in power and the public.' } + white{ bold{ ' In the absence of transparency, truth, and trust, wealth is concentrated and waste is rampant.' } } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ bold{ "We live in a constellation of complex systems." } } + white{ ' It is impossible for any single person or even any single organization or nation in isolation to understand complex systems.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ 'We ' + bold{ 'harness the intelligence at the edge of the network' } } + white{ ' - at the point of impact - and the individual who is face to face with a problem in a microcosm is the tip of the human spear, able both to reach back to all other humans for assistance, and to act on behalf of all humans in the moment.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ bold{ 'Sustainability can only be achieved through mass collaboration and the achievement of panarchy' } } + white{ ' - a constellation of co-equal hybrid systems of self-governance in which all individuals freely choose where they wish to be heard, and have full access to all relevant information.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ 'The goal is to ' + bold{ 'reject money and concentrated, illicitly aggregated and largely phantom wealth' } } + white{ ' in favor of community wealth defined by community knowledge, community sharing of information, and community definition of truth derived in transparency and authenticity, the latter being the ultimate arbiter of shared wealth.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ 'It is our obligation to ' } + white{ bold{ 'speak of what we know as we know it, not dissembling or deceiving' } } + white{ '. This could be considered the \'moral truth\', and ultimately it is what can be validated by others so that a consensus can be arrived at and shared.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ bold{ 'Truth does change, both in the mind of man and in the larger reality where man resides' } } + white{ '. On the one hand, advancing knowledge and paradigm shifts can render old truths sadly insufficient, while bringing forward new, more robust truths. At the same time, actions taken by man while operating under old truths (for example, assuming that the Corps of Engineers can pave over the Mississippi wetlands and levee the largest river in the continental U.S. without having a Katrina-like consequence) create new truths - severe weather events that are not an Act of God but rather an Act of Man acting very badly over time and space.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ bold{ 'E Veritate Potens' } } + white{ ': From Truth, We (the People) Are Made Powerful' } + black{ bold{ ' - Winston Maike, Australian philosopher and researcher, as quoted by Robert David Steele, \'The Open-source Everything Manifesto\'' } }
puts white{ bold{ 'Wealth creates a leisure class that \'buys\' knowledge and defines irrational authority, thus destroying the ethical basis of civilization' } } + white{ '. Durant discussed how a civilization may be characterized by its conception of virtue, which led me to some fruitful exploration of how ' } + white{ bold{ 'the United States is a culture that has equated wealth with virtue, leading to a political culture that can be bought because it is based on rule by secrecy, using secrecy to avoid accountability' } } + white{ '. Today, having abdicated concepts of the good, the beautiful, and the true for a model of primitive accumulation and a materialist set of values, we find that ' } + white{ 'our financial system is what journalist Matt Taibbi called \'Griftopia\'.' } + white{ bold{ ' The financial interests of Wall Street leverage the two-party system as a theatrical sideshow that legitimizes and legalizes massive fraud against the public interest' } } + white{ '. This is the primary reason why secrecy is necessary for those in power.' } + black{ bold{ ' - Robert David Steele, \'The Open-source Everything Manifesto\''} }
puts white{ bold{ 'Our secret intelligence culture and process is antithetical to democracy' } } + white{ ', and enabling of plutocracy, neo-fascism, and the total corruption of our government.' } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert, \'The Open-source Everything Manifesto\''} }
puts white{ 'Durant draws out the importance of ' } + white{ bold{ 'not' } } + white{ ' having a standard government-defined education, and of making education fun, exploratory, diverse, and open-ended. I cannot help but recall here how my hacker friends consider schools to be prisons.' } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert, \'The Open-source Everything Manifesto\''} }
puts white{ 'The Autonomous Internet can be the liberation technology, not only empowering the poor but leveraging the cognitive surplus of the entire human species.' } + black{ bold{ ' - Robert David Steele, ex-Marine, ex-CIA, Open Source Intelligence Expert, \'The Open-source Everything Manifesto\''} }

# randoms - writing & software
puts '--- writing with applicability to software ---'
puts white{ "I was learning to extend myself, to make imprints of my inner life onto the outer reality of the page. Words had created visual fields for me—allowing endless possibilities for expressing meaning." } + black{ bold{ " - Pakistani-American poet Shadab Zeest Hashmi, on his development of calligraphic capacity." } }
puts white{ bold{ "The relation of language to painting is an infinite relation." } } + black{ bold{ " - 'Les Mots et les choses: Une archéologie des sciences humaines', Michel Foucault (1966)" } }
puts white{ bold{ "The artist is not the transcriber of the world" } } + white{ ", he is its rival." } + black{ bold{ " - L'Intemporel (Third volume of 'The Metamorphosis of the Gods'), André Malraux (1957)" } }
puts white{ bold{ "Digression is secular revelation." } } + black{ bold{ " - Adam Phillips, psychoanalyst and author" } }
puts white{ 'A man who lies to himself, and believes his own lies, becomes unable to recognize truth, either in himself or in anyone else.' } + black{ bold{ ' - Fyodor Dostoevsky' } }
puts white{ 'Once you\'ve got some words looking back at you, you can take two or three — or throw them away and look for others.' } + black{ bold{ ' - Bernard Malamud' } }
puts white{ "Writing is nature's way of letting you know how sloppy your thinking is." } + black{ bold{ " - Guindon" } }
puts white{ bold{ "The role of the artist is to ask questions" } } + white{ ", not answer them." } + black{ bold{ " - Anton Checkov" } }
puts white{ "If you can't write it down in English, you can't code it." } + black{ bold{ " - Peter Halpern" } }
puts white{ "If the code and the comments disagree, then both are probably wrong." } + black{ bold{ " - Norm Schryer" } }
puts white{ "A procedure should fit on a page." } + black{ bold{ " - David Tribble" } }
puts white{ bold{ "The Test of Negation" } } + white{ ": Don't include a sentence in documentation if its negation is obviously false." } + black{ bold{ " - Bob Martin, AT&T" } }
puts white{ "When explaining a command, or language feature, or hardware widget, first describe the problem it is designed to solve." } + black{ bold{ " - David Martin" } }
puts white{ "Write with the door closed, " } + bold{ white{ "rewrite with the door open" } } + white{ '.' } + black{ bold{ " - 'Steven King on pair programming', Peter Hilton" } }
puts white{ "I find " } + white{ bold{ "the bigger the monitor, the better the concentration" } } + white{ "." } + black{ bold{ " - 'Anne Rice on development hardware', Peter Hilton" } }
puts white{ bold{ "When writing a novel a writer should create living people" } } + white{ "; people not characters. A character is a charicature." } + black{ bold{ " - 'Ernest Hemingway on user personas', Peter Hilton" } }
puts white{ "There are three rules for writing the novel." } + white{ bold{ " Unfortunately, nobody knows what they are." } } + black{ bold{ " - 'W. Somerset Maugham on enterprise architecture', Peter Hilton" } }
puts white{ bold{ "When people tell you something's wrong or doesn't work for them they are almost always right." } } + white{ " When they tell you exactly what they think is wrong and how to fix it, they are almost always wrong." } + black{ bold{ " - 'Neil Gaiman on review feedback', Peter Hilton" } }
puts white{ bold{ "The main rule of writing is that if you do it with enough assurance and confidence, you're allowed to do whatever you like." } } + black{ bold{ " - 'Neil Gaiman on open source', Peter Hilton" } }
puts white{ "When I use a word, " } + white{ bold{ "it means just what I choose it to mean - neither more nor less" } } + white{ "." } + black{ bold{ " - Humpty Dumpty (\"in a rather scornful tone\"), 'Through the Looking-Glass, and What Alice Found There' (1871), Lewis Carroll" } }
puts white{ "A rose by any other name will end up as a cabbage." } + black{ bold{ " - Sam Gardiner" } }
puts white{ bold{ "Summary of advice from writers" } } + white{ ": Advice from writers is useful, and not only about naming. Writers have been at it for centuries; programming is merely decades old. Also, their advice is better written. And funnier." } + black{ bold{ " - Peter Hilton" } }
puts white{ "A language is a dialect with an army and a navy." } + black{ bold{ " - Max Weinreich" } }
puts white{ "That's what storytellers are... thieves and liars." } + black{ bold{ " - 'Tamaya Drewe' (2010)" } }
puts white{ "Words build bridges in to unexplored regions." } + black{ bold{ " - Adolf Hitler" } }
puts white{ "Impossible is a word to be found only in the dictionary of fools." } + black{ bold{ " - Napoleon Bonaparte" } }
puts white{ "Programmers and translators are doing similar things; they are both translating one language into another." } + black { bold{ " - Japanese engineer" } }
puts white{ "I am all for other authors being cads, but not me." } + black{ bold{ " - William Empson" } }
puts white{ bold{ "The truth is like poetry" } } + white{ ", and most people fucking hate poetry." } + black{ bold{ " - Overheard in a bar in Washington DC" } }
puts white{ "The writer is that person who, embarking upon her task, does not know what to do." } + black{ bold{ " - Donald Barthelme" } }

# randoms - visual art and programming
puts '--- randoms - visual art and programming ---'
puts white{ "When an artist has no personal vision, what can he communicate on to the canvas?" } + black{ bold{ " - Clifford Irving, 'F for Fake' (1973)" } }
puts white{ bold{ "Art is a lie that makes us realize truth" } } + white{ ", at least the truth that is given us to understand." } + black{ bold{ " - Pablo Picasso" } }
puts white{ "When one paints, one loves in a different way." } + black{ bold{ " - Séraphine Louis, 'Séraphine' (2008)" } }
puts white{ bold{ "Art" } } + white{ ": Process of abstraction and representation." } + black{ bold{ " - Alex Schniedeman, Black+White Photography (2016)" } }
puts white{ "There is nothing worse than a sharp image of a fuzzy concept." } + black{ bold{ " - Ansel Adams" } }
puts white{ "This imminence of a revelation which does not occur is, perhaps, the aesthetic phenomenon." } + black{ bold{ " - Jorge Luis Borges" } }

# randoms - AI + learning
puts '--- AI + learning ---'
puts white{ "It is well to bear in mind that " } + white{ bold{ "knowledge is like food, and becomes ours only when it is absorbed, assimilated and digested by the intellect" } } + white{ "." } + black{ bold{ " - 'The Key of Knowledge', Champat Rai Jain (1928)" } }
puts white{ "A smart machine is a profoundly paradoxical entity, but a paradox is not a supernatural act. " } + white{ bold{ "A paradox is a symptom of a breakdown in two competing definitional systems." } } + black{ bold{ " - Bruce Sterling (1995)" } }
puts white{ "The trouble with the world is that the stupid are cocksure and the intelligent are full of doubt." } + black{ bold{ " - Bertrand Russell (1950)" } }
puts white{ "Ignorance more frequently begets confidence than does knowledge." } + black{ bold{ " - Charles Darwin" } }
puts white{ "The fool doth think he is wise, but the wise man knows himself to be a fool." } + black{ bold{ " - William Shakespeare, 'As You Like It' (1559)" } }
puts white{ bold{ "A good educational system should have three purposes" } } + white{ ": it should provide all who want to learn with access to available resources at any time in their lives; empower all who want to share what they know to find those who want to learn it from them; and, finally, furnish all who want to present an issue to the public with the opportunity to make their challenge known." } + black{ bold{ " - Ivan Illich, 'Deschooling Society' (1971)" } }

# seven deadly sins of cloud computing research
puts '--- 7 deadly sins of cloud computing research ---'
puts white{ bold{ 'Sin #1 - Unnecessary distributed parallelism' } } + white{ ': It does not always make sense to parallelize a computation. Doing so almost inevitably comes with an additional overhead, both in runtime performance and in engineering time. When designing a parallel implementation, its performance should ' } + white{ bold{ 'always' } } + white{ ' be compared to an optimized serial implementation in order to understand the overheads involved. If we satisfy ourselves that parallel processing is necessary, it is also worth considering whether ' } + white{ bold{ 'distribution' } } + white{ ' over multiple machines is required. The rapid increase in RAM and CPU cores can make local parallelism economical and worthwhile. Establish the need for distributed parallelism on a case by case basis.' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }
puts white{ bold{ 'Sin #2 - Assuming performance homogeneity' } } + white{ ': Virtualized cloud environments exhibit highly variable and sometimes unpredictable performance. Base reported results on multiple benchmark runs, and report the variance.' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }
puts white{ bold{ 'Sin #3 - Picking the low-hanging fruit' } } + white{ ': It is unsurprising that it is easy to beat a general system by specializing it. Few researchers comment on the composability of their solutions. ' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }
puts white{ bold{ 'Sin #4 - Forcing the abstraction' } } + white{ ': In some application domains, it is unclear if a MapReduce-like approach can offer any benefits, and indeed, some have argued that it is fruitless as a research direction. Ideally, future research should build on [iterative processing, stream processing and graph processing], rather than on the MapReduce paradigm.' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }
puts white{ bold{ 'Sin #5 - Unrepresentative workloads' } } + white{ ': The common assumption in academic research systems is that the cluster workload is relatively homogenous. Most research evaluations measure performance by running a single job on an otherwise idle cluster.' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }
puts white{ bold{ 'Sin #6 - Assuming perfect elasticity' } } + white{ ': The cloud paradigm [...] its promise of an unlimited supply of computation. This is, of course, a fallacy. Workloads do not exhibit infinite parallel speedup. The scalability and supply of compute resources are not infinite. There are limits to the scalability of data center communication infrastructure. Another reason for diminishing returns from parallelization is the increasing likelihood of failures and vulnerability to "straggler" tasks. ' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }
puts white{ bold{ 'Sin #7 - Ignoring fault tolerance' } } + white{ ': Many recent systems neglect to account for the performance implications of fault tolerance, or indeed of faults occuring. For each system, we should ask whether fault tolerance is relevant or required. If it is, it makes sense to check precisely what level is required, and what faults are to be protected against; consider and ideally quantify the cost.' } + black{ bold{ " - Schwarzkopf et al, 'The seven deadly sins of cloud computing research' (2014)" } }

puts '------- rfc1925 on networking ---------'
puts white{ bold{ '1st Fundamental Truth of Networking' } } + white{ ': It Has To Work.' }
puts white{ bold{ '2nd Fundamental Truth of Networking' } } + white{ ': ' } + black{ bold{ 'No matter how hard you push and no matter what the priority,' } } + white{ ' you can\'t increase the speed of light.' }
puts white{ bold{ '2nd Fundamental Truth of Networking (corollary)' } } + white{ ': ' } + black{ bold{ 'No matter how hard you try,' } } + white{ ' you can\'t make a baby in much less than 9 months.' } + black{ bold{ ' Trying to speed this up *might* make it slower, but it won\'t make it happen any quicker.' } }
puts white{ bold{ '3rd Fundamental Truth of Networking' } } + white{ ': With sufficient thrust, pigs fly just fine.' } + black{ bold{ ' However, this is not necessarily a good idea. It is hard to be sure where they are going to land, and it could be dangerous sitting under them as they fly overhead.' } }
puts white{ bold{ '4th Fundamental Truth of Networking' } } + white{ ': Some things in life can never be fully appreciated nor understood unless experienced firsthand.' } + black{ bold{ ' Some things in networking can never be fully understood by someone who neither builds commercial networking equipment nor runs an operational network.' } }
puts white{ bold{ '5th Fundamental Truth of Networking' } } + white{ ': It is always possible to aglutenate multiple separate problems into a single complex interdependent solution.' } + black{ bold{ ' In most cases this is a bad idea.' } }
puts white{ bold{ '6th Fundamental Truth of Networking' } } + white{ ': It is easier to move a problem around than it is to solve it.' } + black{ bold{ ' (For example, by moving the problem to a different part of the overall network architecture)' } }
puts white{ bold{ '6th Fundamental Truth of Networking (corollary)' } } + white{ ': It is always possible to add another level of indirection.' }
puts white{ bold{ '7th Fundamental Truth of Networking' } } + white{ ': It is always something.' }
puts white{ bold{ '7th Fundamental Truth of Networking (corollary)' } } + white{ ': Good, Fast, Cheap: Pick any two. ' } + black{ bold{ "(You can't have all three)" } }
puts white{ bold{ '8th Fundamental Truth of Networking' } } + white{ ': It is more complicated than you think.' }
puts white{ bold{ '9th Fundamental Truth of Networking' } } + white{ ': For all resources, whatever it is, you need more.' }
puts white{ bold{ '9th Fundamental Truth of Networking (corollary)' } } + white{ ': Every networking problem always takes longer to solve than it seems like it should.' }
puts white{ bold{ '10th Fundamental Truth of Networking' } } + white{ ': One size never fits all.' }
puts white{ bold{ '11th Fundamental Truth of Networking' } } + white{ ': Every old idea will be proposed again with a different name and a different presentation' } + black{ bold{ ', regardless of whether it works.' } }
# the above has a corollary which is see corollary to the 6th rule .. leaving this out due to display-time limitations
puts white{ bold{ '12th Fundamental Truth of Networking' } } + white{ ': ' } + black{ bold{ 'In protocol design, ' } } + white{ 'perfection has been reached not when there is nothing left to add, but when there is nothing left to take away' } + black{ bold{ '.' } }

puts '------ anti-OO ------'
puts white{ bold{ "Object-oriented programming is an exceptionally bad idea" } } + white{ " which could only have originated in California." } + black{ bold{ " - Edsger Dijkstra" } }
puts white{ "Object-oriented design is the roman numerals of computing." } + black{ bold{ " - Rob Pike" } }
puts white{ bold{ "The phrase 'object-oriented' means a lot of things." } } + white{ " Half are obvious, and the other half are mistakes." } + black{ bold{ " - Paul Graham" } }
puts white{ "Implementation inheritance causes the same intertwining and brittleness that have been observed when goto statements are overused. As a result, " } + white{ bold{ "OO systems often suffer from complexity and lack of reuse." } } + black{ bold{ " - John Ousterhout Scripting, IEEE Computer, March 1998" } }
puts white{ bold{ "Sometimes, the elegant implementation is just a function." } } + white{ " Not a method. Not a class. Not a framework. Just a function." } + black{ bold{ " - John Carmack" } }
puts white{ "The problem with object-oriented languages is they've got all this implicit environment that they carry around with them. " } + white{ bold{ "You wanted a banana but what you got was a gorilla holding the banana and the entire jungle." } } + black{ bold{ " - Joe Armstrong" } }
puts white{ bold{ "I used to be enamored of object-oriented programming." } } + white{ " I’m now finding myself leaning toward believing that it is a plot designed to destroy joy." } + black{ bold{ " - Eric Allman" } }
puts white{ bold{ "OO is the 'structured programming' snake oil of the 90's" } } + white{ ": useful at times, but hardly the 'end all' programing paradigm some like to make out of it." } + black{ bold{ " - ESR" } }
puts white{ bold{ "The notion of object oriented programming is completely misunderstood." } } + white{ " It's not about objects and classes, it's all about messages." } + black{ bold{ " - Alan Kay" } }

# hardware
puts '------- hardware --------'
puts white{ bold{ "Motto of the Electrical Engineer" } } + white{ ": Working hardware is a lot like an erect penis; it stays up as long as you don't fuck with it." }
puts white{ bold{ "1974" } } + white{ ": 8080 CPU. " } + white{ bold{ "1979" } } + white{ ": SCHEME-79 chip with hardware GC. " } + white{ bold{ "2013" } } + white{ ": Hundreds of inefficient software GCs running on n-GHz 8080 CPUs." } + white{ bold{ " Cool industry." } } + black{ bold{ " - @garybernhardt" } }
puts white{ bold{ "The outsourcing plan failed very badly" } } + white{ ": all these different suppliers who were going to build these major sections couldn't actually do it." } + black{ bold{ " - Dominic Gates (Seattle Times) on the Boeing 787 'Dreamliner'" } }
puts white{ bold{ "Oh yeah. I'm not flying on a 787" } } + white{ " [...] I would definitely avoid flying on a 787." } + black{ bold{ " - Cynthia Cole, former 32 year Boeing employee and former President, Boeing Engineers' Union" } }
